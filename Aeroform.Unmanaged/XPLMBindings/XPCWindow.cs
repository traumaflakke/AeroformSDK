//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Aeroform.Unmanaged.XPLMBindings {

public class XPCWindow : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal XPCWindow(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XPCWindow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(XPCWindow obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~XPCWindow() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XPlaneWrappersPINVOKE.delete_XPCWindow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void DoDraw() {
    XPlaneWrappersPINVOKE.XPCWindow_DoDraw(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void HandleKey(char inKey, int inFlags, char inVirtualKey) {
    XPlaneWrappersPINVOKE.XPCWindow_HandleKey(swigCPtr, inKey, inFlags, inVirtualKey);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoseFocus() {
    XPlaneWrappersPINVOKE.XPCWindow_LoseFocus(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int HandleClick(int x, int y, int inMouse) {
    int ret = XPlaneWrappersPINVOKE.XPCWindow_HandleClick(swigCPtr, x, y, inMouse);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetWindowGeometry(SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPCWindow_GetWindowGeometry(swigCPtr, SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWindowGeometry(int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPCWindow_SetWindowGeometry(swigCPtr, inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetWindowIsVisible() {
    int ret = XPlaneWrappersPINVOKE.XPCWindow_GetWindowIsVisible(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetWindowIsVisible(int inIsVisible) {
    XPlaneWrappersPINVOKE.XPCWindow_SetWindowIsVisible(swigCPtr, inIsVisible);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public void TakeKeyboardFocus() {
    XPlaneWrappersPINVOKE.XPCWindow_TakeKeyboardFocus(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public void BringWindowToFront() {
    XPlaneWrappersPINVOKE.XPCWindow_BringWindowToFront(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public int IsWindowInFront() {
    int ret = XPlaneWrappersPINVOKE.XPCWindow_IsWindowInFront(swigCPtr);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
