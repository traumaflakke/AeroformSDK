//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Aeroform.Unmanaged.XPLMBindings {

public class XPlaneWrappers {
  public static int XPLMGetMyID() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetMyID();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMCountPlugins() {
    int ret = XPlaneWrappersPINVOKE.XPLMCountPlugins();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetNthPlugin(int inIndex) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetNthPlugin(inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMFindPluginByPath(string inPath) {
    int ret = XPlaneWrappersPINVOKE.XPLMFindPluginByPath(inPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMFindPluginBySignature(string inSignature) {
    int ret = XPlaneWrappersPINVOKE.XPLMFindPluginBySignature(inSignature);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetPluginInfo(int inPlugin, string outName, string outFilePath, string outSignature, string outDescription) {
    XPlaneWrappersPINVOKE.XPLMGetPluginInfo(inPlugin, outName, outFilePath, outSignature, outDescription);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsPluginEnabled(int inPluginID) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsPluginEnabled(inPluginID);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMEnablePlugin(int inPluginID) {
    int ret = XPlaneWrappersPINVOKE.XPLMEnablePlugin(inPluginID);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDisablePlugin(int inPluginID) {
    XPlaneWrappersPINVOKE.XPLMDisablePlugin(inPluginID);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMReloadPlugins() {
    XPlaneWrappersPINVOKE.XPLMReloadPlugins();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSendMessageToPlugin(int inPlugin, int inMessage, SWIGTYPE_p_void inParam) {
    XPlaneWrappersPINVOKE.XPLMSendMessageToPlugin(inPlugin, inMessage, SWIGTYPE_p_void.getCPtr(inParam));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMHasFeature(string inFeature) {
    int ret = XPlaneWrappersPINVOKE.XPLMHasFeature(inFeature);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMIsFeatureEnabled(string inFeature) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsFeatureEnabled(inFeature);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMEnableFeature(string inFeature, int inEnable) {
    XPlaneWrappersPINVOKE.XPLMEnableFeature(inFeature, inEnable);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMEnumerateFeatures(SWIGTYPE_p_f_p_q_const__char_p_void__void inEnumerator, SWIGTYPE_p_void inRef) {
    XPlaneWrappersPINVOKE.XPLMEnumerateFeatures(SWIGTYPE_p_f_p_q_const__char_p_void__void.getCPtr(inEnumerator), SWIGTYPE_p_void.getCPtr(inRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetUsersAircraft(string inAircraftPath) {
    XPlaneWrappersPINVOKE.XPLMSetUsersAircraft(inAircraftPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMPlaceUserAtAirport(string inAirportCode) {
    XPlaneWrappersPINVOKE.XPLMPlaceUserAtAirport(inAirportCode);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMPlaceUserAtLocation(double latitudeDegrees, double longitudeDegrees, float elevationMetersMSL, float headingDegreesTrue, float speedMetersPerSecond) {
    XPlaneWrappersPINVOKE.XPLMPlaceUserAtLocation(latitudeDegrees, longitudeDegrees, elevationMetersMSL, headingDegreesTrue, speedMetersPerSecond);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMCountAircraft(SWIGTYPE_p_int outTotalAircraft, SWIGTYPE_p_int outActiveAircraft, SWIGTYPE_p_int outController) {
    XPlaneWrappersPINVOKE.XPLMCountAircraft(SWIGTYPE_p_int.getCPtr(outTotalAircraft), SWIGTYPE_p_int.getCPtr(outActiveAircraft), SWIGTYPE_p_int.getCPtr(outController));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetNthAircraftModel(int inIndex, string outFileName, string outPath) {
    XPlaneWrappersPINVOKE.XPLMGetNthAircraftModel(inIndex, outFileName, outPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMAcquirePlanes(SWIGTYPE_p_p_char inAircraft, SWIGTYPE_p_f_p_void__void inCallback, SWIGTYPE_p_void inRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMAcquirePlanes(SWIGTYPE_p_p_char.getCPtr(inAircraft), SWIGTYPE_p_f_p_void__void.getCPtr(inCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMReleasePlanes() {
    XPlaneWrappersPINVOKE.XPLMReleasePlanes();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetActiveAircraftCount(int inCount) {
    XPlaneWrappersPINVOKE.XPLMSetActiveAircraftCount(inCount);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetAircraftModel(int inIndex, string inAircraftPath) {
    XPlaneWrappersPINVOKE.XPLMSetAircraftModel(inIndex, inAircraftPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDisableAIForPlane(int inPlaneIndex) {
    XPlaneWrappersPINVOKE.XPLMDisableAIForPlane(inPlaneIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMPlayPCMOnBus(SWIGTYPE_p_void audioBuffer, SWIGTYPE_p_uint32_t bufferSize, FMOD_SOUND_FORMAT soundFormat, int freqHz, int numChannels, int loop, int audioType, SWIGTYPE_p_f_p_void_enum_FMOD_RESULT__void inCallback, SWIGTYPE_p_void inRefcon) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMPlayPCMOnBus(SWIGTYPE_p_void.getCPtr(audioBuffer), SWIGTYPE_p_uint32_t.getCPtr(bufferSize), (int)soundFormat, freqHz, numChannels, loop, audioType, SWIGTYPE_p_f_p_void_enum_FMOD_RESULT__void.getCPtr(inCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMStopAudio(SWIGTYPE_p_void fmod_channel) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMStopAudio(SWIGTYPE_p_void.getCPtr(fmod_channel));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMSetAudioPosition(SWIGTYPE_p_void fmod_channel, FMOD_VECTOR position, FMOD_VECTOR velocity) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMSetAudioPosition(SWIGTYPE_p_void.getCPtr(fmod_channel), FMOD_VECTOR.getCPtr(position), FMOD_VECTOR.getCPtr(velocity));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMSetAudioFadeDistance(SWIGTYPE_p_void fmod_channel, float min_fade_distance, float max_fade_distance) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMSetAudioFadeDistance(SWIGTYPE_p_void.getCPtr(fmod_channel), min_fade_distance, max_fade_distance);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMSetAudioVolume(SWIGTYPE_p_void fmod_channel, float source_volume) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMSetAudioVolume(SWIGTYPE_p_void.getCPtr(fmod_channel), source_volume);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMSetAudioPitch(SWIGTYPE_p_void fmod_channel, float audio_pitch_hz) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMSetAudioPitch(SWIGTYPE_p_void.getCPtr(fmod_channel), audio_pitch_hz);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static FMOD_RESULT XPLMSetAudioCone(SWIGTYPE_p_void fmod_channel, float inside_angle, float outside_angle, float outside_volume, FMOD_VECTOR orientation) {
    FMOD_RESULT ret = (FMOD_RESULT)XPlaneWrappersPINVOKE.XPLMSetAudioCone(SWIGTYPE_p_void.getCPtr(fmod_channel), inside_angle, outside_angle, outside_volume, FMOD_VECTOR.getCPtr(orientation));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMCountDataRefs() {
    int ret = XPlaneWrappersPINVOKE.XPLMCountDataRefs();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetDataRefsByIndex(int offset, int count, SWIGTYPE_p_p_void outDataRefs) {
    XPlaneWrappersPINVOKE.XPLMGetDataRefsByIndex(offset, count, SWIGTYPE_p_p_void.getCPtr(outDataRefs));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetDataRefInfo(SWIGTYPE_p_void inDataRef, XPLMDataRefInfo_t outInfo) {
    XPlaneWrappersPINVOKE.XPLMGetDataRefInfo(SWIGTYPE_p_void.getCPtr(inDataRef), XPLMDataRefInfo_t.getCPtr(outInfo));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMFindDataRef(string inDataRefName) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMFindDataRef(inDataRefName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMCanWriteDataRef(SWIGTYPE_p_void inDataRef) {
    int ret = XPlaneWrappersPINVOKE.XPLMCanWriteDataRef(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMIsDataRefGood(SWIGTYPE_p_void inDataRef) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsDataRefGood(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDataRefTypes(SWIGTYPE_p_void inDataRef) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDataRefTypes(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDatai(SWIGTYPE_p_void inDataRef) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDatai(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDatai(SWIGTYPE_p_void inDataRef, int inValue) {
    XPlaneWrappersPINVOKE.XPLMSetDatai(SWIGTYPE_p_void.getCPtr(inDataRef), inValue);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float XPLMGetDataf(SWIGTYPE_p_void inDataRef) {
    float ret = XPlaneWrappersPINVOKE.XPLMGetDataf(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDataf(SWIGTYPE_p_void inDataRef, float inValue) {
    XPlaneWrappersPINVOKE.XPLMSetDataf(SWIGTYPE_p_void.getCPtr(inDataRef), inValue);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double XPLMGetDatad(SWIGTYPE_p_void inDataRef) {
    double ret = XPlaneWrappersPINVOKE.XPLMGetDatad(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDatad(SWIGTYPE_p_void inDataRef, double inValue) {
    XPlaneWrappersPINVOKE.XPLMSetDatad(SWIGTYPE_p_void.getCPtr(inDataRef), inValue);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetDatavi(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_int outValues, int inOffset, int inMax) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDatavi(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_int.getCPtr(outValues), inOffset, inMax);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDatavi(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_int inValues, int inoffset, int inCount) {
    XPlaneWrappersPINVOKE.XPLMSetDatavi(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_int.getCPtr(inValues), inoffset, inCount);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetDatavf(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_float outValues, int inOffset, int inMax) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDatavf(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_float.getCPtr(outValues), inOffset, inMax);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDatavf(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_float inValues, int inoffset, int inCount) {
    XPlaneWrappersPINVOKE.XPLMSetDatavf(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_float.getCPtr(inValues), inoffset, inCount);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetDatab(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_void outValue, int inOffset, int inMaxBytes) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDatab(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_void.getCPtr(outValue), inOffset, inMaxBytes);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDatab(SWIGTYPE_p_void inDataRef, SWIGTYPE_p_void inValue, int inOffset, int inLength) {
    XPlaneWrappersPINVOKE.XPLMSetDatab(SWIGTYPE_p_void.getCPtr(inDataRef), SWIGTYPE_p_void.getCPtr(inValue), inOffset, inLength);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMRegisterDataAccessor(string inDataName, int inDataType, int inIsWritable, SWIGTYPE_p_f_p_void__int inReadInt, SWIGTYPE_p_f_p_void_int__void inWriteInt, SWIGTYPE_p_f_p_void__float inReadFloat, SWIGTYPE_p_f_p_void_float__void inWriteFloat, SWIGTYPE_p_f_p_void__double inReadDouble, SWIGTYPE_p_f_p_void_double__void inWriteDouble, SWIGTYPE_p_f_p_void_p_int_int_int__int inReadIntArray, SWIGTYPE_p_f_p_void_p_int_int_int__void inWriteIntArray, SWIGTYPE_p_f_p_void_p_float_int_int__int inReadFloatArray, SWIGTYPE_p_f_p_void_p_float_int_int__void inWriteFloatArray, SWIGTYPE_p_f_p_void_p_void_int_int__int inReadData, SWIGTYPE_p_f_p_void_p_void_int_int__void inWriteData, SWIGTYPE_p_void inReadRefcon, SWIGTYPE_p_void inWriteRefcon) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMRegisterDataAccessor(inDataName, inDataType, inIsWritable, SWIGTYPE_p_f_p_void__int.getCPtr(inReadInt), SWIGTYPE_p_f_p_void_int__void.getCPtr(inWriteInt), SWIGTYPE_p_f_p_void__float.getCPtr(inReadFloat), SWIGTYPE_p_f_p_void_float__void.getCPtr(inWriteFloat), SWIGTYPE_p_f_p_void__double.getCPtr(inReadDouble), SWIGTYPE_p_f_p_void_double__void.getCPtr(inWriteDouble), SWIGTYPE_p_f_p_void_p_int_int_int__int.getCPtr(inReadIntArray), SWIGTYPE_p_f_p_void_p_int_int_int__void.getCPtr(inWriteIntArray), SWIGTYPE_p_f_p_void_p_float_int_int__int.getCPtr(inReadFloatArray), SWIGTYPE_p_f_p_void_p_float_int_int__void.getCPtr(inWriteFloatArray), SWIGTYPE_p_f_p_void_p_void_int_int__int.getCPtr(inReadData), SWIGTYPE_p_f_p_void_p_void_int_int__void.getCPtr(inWriteData), SWIGTYPE_p_void.getCPtr(inReadRefcon), SWIGTYPE_p_void.getCPtr(inWriteRefcon));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMUnregisterDataAccessor(SWIGTYPE_p_void inDataRef) {
    XPlaneWrappersPINVOKE.XPLMUnregisterDataAccessor(SWIGTYPE_p_void.getCPtr(inDataRef));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMShareData(string inDataName, int inDataType, SWIGTYPE_p_f_p_void__void inNotificationFunc, SWIGTYPE_p_void inNotificationRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMShareData(inDataName, inDataType, SWIGTYPE_p_f_p_void__void.getCPtr(inNotificationFunc), SWIGTYPE_p_void.getCPtr(inNotificationRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMUnshareData(string inDataName, int inDataType, SWIGTYPE_p_f_p_void__void inNotificationFunc, SWIGTYPE_p_void inNotificationRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMUnshareData(inDataName, inDataType, SWIGTYPE_p_f_p_void__void.getCPtr(inNotificationFunc), SWIGTYPE_p_void.getCPtr(inNotificationRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetFirstNavAid() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetFirstNavAid();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetNextNavAid(int inNavAidRef) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetNextNavAid(inNavAidRef);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMFindFirstNavAidOfType(int inType) {
    int ret = XPlaneWrappersPINVOKE.XPLMFindFirstNavAidOfType(inType);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMFindLastNavAidOfType(int inType) {
    int ret = XPlaneWrappersPINVOKE.XPLMFindLastNavAidOfType(inType);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMFindNavAid(string inNameFragment, string inIDFragment, SWIGTYPE_p_float inLat, SWIGTYPE_p_float inLon, SWIGTYPE_p_int inFrequency, int inType) {
    int ret = XPlaneWrappersPINVOKE.XPLMFindNavAid(inNameFragment, inIDFragment, SWIGTYPE_p_float.getCPtr(inLat), SWIGTYPE_p_float.getCPtr(inLon), SWIGTYPE_p_int.getCPtr(inFrequency), inType);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetNavAidInfo(int inRef, SWIGTYPE_p_int outType, SWIGTYPE_p_float outLatitude, SWIGTYPE_p_float outLongitude, SWIGTYPE_p_float outHeight, SWIGTYPE_p_int outFrequency, SWIGTYPE_p_float outHeading, string outID, string outName, string outReg) {
    XPlaneWrappersPINVOKE.XPLMGetNavAidInfo(inRef, SWIGTYPE_p_int.getCPtr(outType), SWIGTYPE_p_float.getCPtr(outLatitude), SWIGTYPE_p_float.getCPtr(outLongitude), SWIGTYPE_p_float.getCPtr(outHeight), SWIGTYPE_p_int.getCPtr(outFrequency), SWIGTYPE_p_float.getCPtr(outHeading), outID, outName, outReg);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMCountFMSEntries() {
    int ret = XPlaneWrappersPINVOKE.XPLMCountFMSEntries();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDisplayedFMSEntry() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDisplayedFMSEntry();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDestinationFMSEntry() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDestinationFMSEntry();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDisplayedFMSEntry(int inIndex) {
    XPlaneWrappersPINVOKE.XPLMSetDisplayedFMSEntry(inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetDestinationFMSEntry(int inIndex) {
    XPlaneWrappersPINVOKE.XPLMSetDestinationFMSEntry(inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetFMSEntryInfo(int inIndex, SWIGTYPE_p_int outType, string outID, SWIGTYPE_p_int outRef, SWIGTYPE_p_int outAltitude, SWIGTYPE_p_float outLat, SWIGTYPE_p_float outLon) {
    XPlaneWrappersPINVOKE.XPLMGetFMSEntryInfo(inIndex, SWIGTYPE_p_int.getCPtr(outType), outID, SWIGTYPE_p_int.getCPtr(outRef), SWIGTYPE_p_int.getCPtr(outAltitude), SWIGTYPE_p_float.getCPtr(outLat), SWIGTYPE_p_float.getCPtr(outLon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFMSEntryInfo(int inIndex, int inRef, int inAltitude) {
    XPlaneWrappersPINVOKE.XPLMSetFMSEntryInfo(inIndex, inRef, inAltitude);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFMSEntryLatLon(int inIndex, float inLat, float inLon, int inAltitude) {
    XPlaneWrappersPINVOKE.XPLMSetFMSEntryLatLon(inIndex, inLat, inLon, inAltitude);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMClearFMSEntry(int inIndex) {
    XPlaneWrappersPINVOKE.XPLMClearFMSEntry(inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMCountFMSFlightPlanEntries(int inFlightPlan) {
    int ret = XPlaneWrappersPINVOKE.XPLMCountFMSFlightPlanEntries(inFlightPlan);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDisplayedFMSFlightPlanEntry(int inFlightPlan) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDisplayedFMSFlightPlanEntry(inFlightPlan);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDestinationFMSFlightPlanEntry(int inFlightPlan) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDestinationFMSFlightPlanEntry(inFlightPlan);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetDisplayedFMSFlightPlanEntry(int inFlightPlan, int inIndex) {
    XPlaneWrappersPINVOKE.XPLMSetDisplayedFMSFlightPlanEntry(inFlightPlan, inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetDestinationFMSFlightPlanEntry(int inFlightPlan, int inIndex) {
    XPlaneWrappersPINVOKE.XPLMSetDestinationFMSFlightPlanEntry(inFlightPlan, inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetDirectToFMSFlightPlanEntry(int inFlightPlan, int inIndex) {
    XPlaneWrappersPINVOKE.XPLMSetDirectToFMSFlightPlanEntry(inFlightPlan, inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetFMSFlightPlanEntryInfo(int inFlightPlan, int inIndex, SWIGTYPE_p_int outType, string outID, SWIGTYPE_p_int outRef, SWIGTYPE_p_int outAltitude, SWIGTYPE_p_float outLat, SWIGTYPE_p_float outLon) {
    XPlaneWrappersPINVOKE.XPLMGetFMSFlightPlanEntryInfo(inFlightPlan, inIndex, SWIGTYPE_p_int.getCPtr(outType), outID, SWIGTYPE_p_int.getCPtr(outRef), SWIGTYPE_p_int.getCPtr(outAltitude), SWIGTYPE_p_float.getCPtr(outLat), SWIGTYPE_p_float.getCPtr(outLon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFMSFlightPlanEntryInfo(int inFlightPlan, int inIndex, int inRef, int inAltitude) {
    XPlaneWrappersPINVOKE.XPLMSetFMSFlightPlanEntryInfo(inFlightPlan, inIndex, inRef, inAltitude);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFMSFlightPlanEntryLatLon(int inFlightPlan, int inIndex, float inLat, float inLon, int inAltitude) {
    XPlaneWrappersPINVOKE.XPLMSetFMSFlightPlanEntryLatLon(inFlightPlan, inIndex, inLat, inLon, inAltitude);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFMSFlightPlanEntryLatLonWithId(int inFlightPlan, int inIndex, float inLat, float inLon, int inAltitude, string inId, uint inIdLength) {
    XPlaneWrappersPINVOKE.XPLMSetFMSFlightPlanEntryLatLonWithId(inFlightPlan, inIndex, inLat, inLon, inAltitude, inId, inIdLength);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMClearFMSFlightPlanEntry(int inFlightPlan, int inIndex) {
    XPlaneWrappersPINVOKE.XPLMClearFMSFlightPlanEntry(inFlightPlan, inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMLoadFMSFlightPlan(int inDevice, string inBuffer, uint inBufferLen) {
    XPlaneWrappersPINVOKE.XPLMLoadFMSFlightPlan(inDevice, inBuffer, inBufferLen);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint XPLMSaveFMSFlightPlan(int inDevice, string inBuffer, uint inBufferLen) {
    uint ret = XPlaneWrappersPINVOKE.XPLMSaveFMSFlightPlan(inDevice, inBuffer, inBufferLen);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetGPSDestinationType() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetGPSDestinationType();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetGPSDestination() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetGPSDestination();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetGraphicsState(int inEnableFog, int inNumberTexUnits, int inEnableLighting, int inEnableAlphaTesting, int inEnableAlphaBlending, int inEnableDepthTesting, int inEnableDepthWriting) {
    XPlaneWrappersPINVOKE.XPLMSetGraphicsState(inEnableFog, inNumberTexUnits, inEnableLighting, inEnableAlphaTesting, inEnableAlphaBlending, inEnableDepthTesting, inEnableDepthWriting);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMBindTexture2d(int inTextureNum, int inTextureUnit) {
    XPlaneWrappersPINVOKE.XPLMBindTexture2d(inTextureNum, inTextureUnit);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGenerateTextureNumbers(SWIGTYPE_p_int outTextureIDs, int inCount) {
    XPlaneWrappersPINVOKE.XPLMGenerateTextureNumbers(SWIGTYPE_p_int.getCPtr(outTextureIDs), inCount);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMWorldToLocal(double inLatitude, double inLongitude, double inAltitude, SWIGTYPE_p_double outX, SWIGTYPE_p_double outY, SWIGTYPE_p_double outZ) {
    XPlaneWrappersPINVOKE.XPLMWorldToLocal(inLatitude, inLongitude, inAltitude, SWIGTYPE_p_double.getCPtr(outX), SWIGTYPE_p_double.getCPtr(outY), SWIGTYPE_p_double.getCPtr(outZ));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMLocalToWorld(double inX, double inY, double inZ, SWIGTYPE_p_double outLatitude, SWIGTYPE_p_double outLongitude, SWIGTYPE_p_double outAltitude) {
    XPlaneWrappersPINVOKE.XPLMLocalToWorld(inX, inY, inZ, SWIGTYPE_p_double.getCPtr(outLatitude), SWIGTYPE_p_double.getCPtr(outLongitude), SWIGTYPE_p_double.getCPtr(outAltitude));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDrawTranslucentDarkBox(int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPLMDrawTranslucentDarkBox(inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDrawString(SWIGTYPE_p_float inColorRGB, int inXOffset, int inYOffset, string inChar, SWIGTYPE_p_int inWordWrapWidth, int inFontID) {
    XPlaneWrappersPINVOKE.XPLMDrawString(SWIGTYPE_p_float.getCPtr(inColorRGB), inXOffset, inYOffset, inChar, SWIGTYPE_p_int.getCPtr(inWordWrapWidth), inFontID);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDrawNumber(SWIGTYPE_p_float inColorRGB, int inXOffset, int inYOffset, double inValue, int inDigits, int inDecimals, int inShowSign, int inFontID) {
    XPlaneWrappersPINVOKE.XPLMDrawNumber(SWIGTYPE_p_float.getCPtr(inColorRGB), inXOffset, inYOffset, inValue, inDigits, inDecimals, inShowSign, inFontID);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetFontDimensions(int inFontID, SWIGTYPE_p_int outCharWidth, SWIGTYPE_p_int outCharHeight, SWIGTYPE_p_int outDigitsOnly) {
    XPlaneWrappersPINVOKE.XPLMGetFontDimensions(inFontID, SWIGTYPE_p_int.getCPtr(outCharWidth), SWIGTYPE_p_int.getCPtr(outCharHeight), SWIGTYPE_p_int.getCPtr(outDigitsOnly));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float XPLMMeasureString(int inFontID, string inChar, int inNumChars) {
    float ret = XPlaneWrappersPINVOKE.XPLMMeasureString(inFontID, inChar, inNumChars);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMCreateInstance(SWIGTYPE_p_void obj, SWIGTYPE_p_p_char datarefs) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateInstance(SWIGTYPE_p_void.getCPtr(obj), SWIGTYPE_p_p_char.getCPtr(datarefs));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyInstance(SWIGTYPE_p_void instance) {
    XPlaneWrappersPINVOKE.XPLMDestroyInstance(SWIGTYPE_p_void.getCPtr(instance));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMInstanceSetPosition(SWIGTYPE_p_void instance, XPLMDrawInfo_t new_position, SWIGTYPE_p_float data) {
    XPlaneWrappersPINVOKE.XPLMInstanceSetPosition(SWIGTYPE_p_void.getCPtr(instance), XPLMDrawInfo_t.getCPtr(new_position), SWIGTYPE_p_float.getCPtr(data));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMRegisterDrawCallback(SWIGTYPE_p_f_int_int_p_void__int inCallback, int inPhase, int inWantsBefore, SWIGTYPE_p_void inRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMRegisterDrawCallback(SWIGTYPE_p_f_int_int_p_void__int.getCPtr(inCallback), inPhase, inWantsBefore, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMUnregisterDrawCallback(SWIGTYPE_p_f_int_int_p_void__int inCallback, int inPhase, int inWantsBefore, SWIGTYPE_p_void inRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMUnregisterDrawCallback(SWIGTYPE_p_f_int_int_p_void__int.getCPtr(inCallback), inPhase, inWantsBefore, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMRegisterAvionicsCallbacksEx(XPLMCustomizeAvionics_t inParams) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMRegisterAvionicsCallbacksEx(XPLMCustomizeAvionics_t.getCPtr(inParams));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMGetAvionicsHandle(int inDeviceID) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMGetAvionicsHandle(inDeviceID);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMUnregisterAvionicsCallbacks(SWIGTYPE_p_void inAvionicsId) {
    XPlaneWrappersPINVOKE.XPLMUnregisterAvionicsCallbacks(SWIGTYPE_p_void.getCPtr(inAvionicsId));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMCreateAvionicsEx(XPLMCreateAvionics_t inParams) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateAvionicsEx(XPLMCreateAvionics_t.getCPtr(inParams));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyAvionics(SWIGTYPE_p_void inHandle) {
    XPlaneWrappersPINVOKE.XPLMDestroyAvionics(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsAvionicsBound(SWIGTYPE_p_void inHandle) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsAvionicsBound(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetAvionicsBrightnessRheo(SWIGTYPE_p_void inHandle, float brightness) {
    XPlaneWrappersPINVOKE.XPLMSetAvionicsBrightnessRheo(SWIGTYPE_p_void.getCPtr(inHandle), brightness);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float XPLMGetAvionicsBrightnessRheo(SWIGTYPE_p_void inHandle) {
    float ret = XPlaneWrappersPINVOKE.XPLMGetAvionicsBrightnessRheo(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XPLMGetAvionicsBusVoltsRatio(SWIGTYPE_p_void inHandle) {
    float ret = XPlaneWrappersPINVOKE.XPLMGetAvionicsBusVoltsRatio(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMIsCursorOverAvionics(SWIGTYPE_p_void inHandle, SWIGTYPE_p_int outX, SWIGTYPE_p_int outY) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsCursorOverAvionics(SWIGTYPE_p_void.getCPtr(inHandle), SWIGTYPE_p_int.getCPtr(outX), SWIGTYPE_p_int.getCPtr(outY));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMAvionicsNeedsDrawing(SWIGTYPE_p_void inHandle) {
    XPlaneWrappersPINVOKE.XPLMAvionicsNeedsDrawing(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetAvionicsPopupVisible(SWIGTYPE_p_void inHandle, int inVisible) {
    XPlaneWrappersPINVOKE.XPLMSetAvionicsPopupVisible(SWIGTYPE_p_void.getCPtr(inHandle), inVisible);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsAvionicsPopupVisible(SWIGTYPE_p_void inHandle) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsAvionicsPopupVisible(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMPopOutAvionics(SWIGTYPE_p_void inHandle) {
    XPlaneWrappersPINVOKE.XPLMPopOutAvionics(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsAvionicsPoppedOut(SWIGTYPE_p_void inHandle) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsAvionicsPoppedOut(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMTakeAvionicsKeyboardFocus(SWIGTYPE_p_void inHandle) {
    XPlaneWrappersPINVOKE.XPLMTakeAvionicsKeyboardFocus(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMHasAvionicsKeyboardFocus(SWIGTYPE_p_void inHandle) {
    int ret = XPlaneWrappersPINVOKE.XPLMHasAvionicsKeyboardFocus(SWIGTYPE_p_void.getCPtr(inHandle));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetAvionicsGeometry(SWIGTYPE_p_void inHandle, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPLMGetAvionicsGeometry(SWIGTYPE_p_void.getCPtr(inHandle), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetAvionicsGeometry(SWIGTYPE_p_void inHandle, int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPLMSetAvionicsGeometry(SWIGTYPE_p_void.getCPtr(inHandle), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetAvionicsGeometryOS(SWIGTYPE_p_void inHandle, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPLMGetAvionicsGeometryOS(SWIGTYPE_p_void.getCPtr(inHandle), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetAvionicsGeometryOS(SWIGTYPE_p_void inHandle, int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPLMSetAvionicsGeometryOS(SWIGTYPE_p_void.getCPtr(inHandle), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMCreateWindowEx(XPLMCreateWindow_t inParams) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateWindowEx(XPLMCreateWindow_t.getCPtr(inParams));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMCreateWindow(int inLeft, int inTop, int inRight, int inBottom, int inIsVisible, SWIGTYPE_p_f_p_void_p_void__void inDrawCallback, SWIGTYPE_p_f_p_void_char_int_char_p_void_int__void inKeyCallback, SWIGTYPE_p_f_p_void_int_int_int_p_void__int inMouseCallback, SWIGTYPE_p_void inRefcon) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateWindow(inLeft, inTop, inRight, inBottom, inIsVisible, SWIGTYPE_p_f_p_void_p_void__void.getCPtr(inDrawCallback), SWIGTYPE_p_f_p_void_char_int_char_p_void_int__void.getCPtr(inKeyCallback), SWIGTYPE_p_f_p_void_int_int_int_p_void__int.getCPtr(inMouseCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyWindow(SWIGTYPE_p_void inWindowID) {
    XPlaneWrappersPINVOKE.XPLMDestroyWindow(SWIGTYPE_p_void.getCPtr(inWindowID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetScreenSize(SWIGTYPE_p_int outWidth, SWIGTYPE_p_int outHeight) {
    XPlaneWrappersPINVOKE.XPLMGetScreenSize(SWIGTYPE_p_int.getCPtr(outWidth), SWIGTYPE_p_int.getCPtr(outHeight));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetScreenBoundsGlobal(SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPLMGetScreenBoundsGlobal(SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetAllMonitorBoundsGlobal(SWIGTYPE_p_f_int_int_int_int_int_p_void__void inMonitorBoundsCallback, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMGetAllMonitorBoundsGlobal(SWIGTYPE_p_f_int_int_int_int_int_p_void__void.getCPtr(inMonitorBoundsCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetAllMonitorBoundsOS(SWIGTYPE_p_f_int_int_int_int_int_p_void__void inMonitorBoundsCallback, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMGetAllMonitorBoundsOS(SWIGTYPE_p_f_int_int_int_int_int_p_void__void.getCPtr(inMonitorBoundsCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetMouseLocation(SWIGTYPE_p_int outX, SWIGTYPE_p_int outY) {
    XPlaneWrappersPINVOKE.XPLMGetMouseLocation(SWIGTYPE_p_int.getCPtr(outX), SWIGTYPE_p_int.getCPtr(outY));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetMouseLocationGlobal(SWIGTYPE_p_int outX, SWIGTYPE_p_int outY) {
    XPlaneWrappersPINVOKE.XPLMGetMouseLocationGlobal(SWIGTYPE_p_int.getCPtr(outX), SWIGTYPE_p_int.getCPtr(outY));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetWindowGeometry(SWIGTYPE_p_void inWindowID, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPLMGetWindowGeometry(SWIGTYPE_p_void.getCPtr(inWindowID), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowGeometry(SWIGTYPE_p_void inWindowID, int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPLMSetWindowGeometry(SWIGTYPE_p_void.getCPtr(inWindowID), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetWindowGeometryOS(SWIGTYPE_p_void inWindowID, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPLMGetWindowGeometryOS(SWIGTYPE_p_void.getCPtr(inWindowID), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowGeometryOS(SWIGTYPE_p_void inWindowID, int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPLMSetWindowGeometryOS(SWIGTYPE_p_void.getCPtr(inWindowID), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetWindowGeometryVR(SWIGTYPE_p_void inWindowID, SWIGTYPE_p_int outWidthBoxels, SWIGTYPE_p_int outHeightBoxels) {
    XPlaneWrappersPINVOKE.XPLMGetWindowGeometryVR(SWIGTYPE_p_void.getCPtr(inWindowID), SWIGTYPE_p_int.getCPtr(outWidthBoxels), SWIGTYPE_p_int.getCPtr(outHeightBoxels));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowGeometryVR(SWIGTYPE_p_void inWindowID, int widthBoxels, int heightBoxels) {
    XPlaneWrappersPINVOKE.XPLMSetWindowGeometryVR(SWIGTYPE_p_void.getCPtr(inWindowID), widthBoxels, heightBoxels);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetWindowIsVisible(SWIGTYPE_p_void inWindowID) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetWindowIsVisible(SWIGTYPE_p_void.getCPtr(inWindowID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetWindowIsVisible(SWIGTYPE_p_void inWindowID, int inIsVisible) {
    XPlaneWrappersPINVOKE.XPLMSetWindowIsVisible(SWIGTYPE_p_void.getCPtr(inWindowID), inIsVisible);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMWindowIsPoppedOut(SWIGTYPE_p_void inWindowID) {
    int ret = XPlaneWrappersPINVOKE.XPLMWindowIsPoppedOut(SWIGTYPE_p_void.getCPtr(inWindowID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMWindowIsInVR(SWIGTYPE_p_void inWindowID) {
    int ret = XPlaneWrappersPINVOKE.XPLMWindowIsInVR(SWIGTYPE_p_void.getCPtr(inWindowID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetWindowGravity(SWIGTYPE_p_void inWindowID, float inLeftGravity, float inTopGravity, float inRightGravity, float inBottomGravity) {
    XPlaneWrappersPINVOKE.XPLMSetWindowGravity(SWIGTYPE_p_void.getCPtr(inWindowID), inLeftGravity, inTopGravity, inRightGravity, inBottomGravity);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowResizingLimits(SWIGTYPE_p_void inWindowID, int inMinWidthBoxels, int inMinHeightBoxels, int inMaxWidthBoxels, int inMaxHeightBoxels) {
    XPlaneWrappersPINVOKE.XPLMSetWindowResizingLimits(SWIGTYPE_p_void.getCPtr(inWindowID), inMinWidthBoxels, inMinHeightBoxels, inMaxWidthBoxels, inMaxHeightBoxels);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowPositioningMode(SWIGTYPE_p_void inWindowID, int inPositioningMode, int inMonitorIndex) {
    XPlaneWrappersPINVOKE.XPLMSetWindowPositioningMode(SWIGTYPE_p_void.getCPtr(inWindowID), inPositioningMode, inMonitorIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetWindowTitle(SWIGTYPE_p_void inWindowID, string inWindowTitle) {
    XPlaneWrappersPINVOKE.XPLMSetWindowTitle(SWIGTYPE_p_void.getCPtr(inWindowID), inWindowTitle);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMGetWindowRefCon(SWIGTYPE_p_void inWindowID) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMGetWindowRefCon(SWIGTYPE_p_void.getCPtr(inWindowID));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetWindowRefCon(SWIGTYPE_p_void inWindowID, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMSetWindowRefCon(SWIGTYPE_p_void.getCPtr(inWindowID), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMTakeKeyboardFocus(SWIGTYPE_p_void inWindow) {
    XPlaneWrappersPINVOKE.XPLMTakeKeyboardFocus(SWIGTYPE_p_void.getCPtr(inWindow));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMHasKeyboardFocus(SWIGTYPE_p_void inWindow) {
    int ret = XPlaneWrappersPINVOKE.XPLMHasKeyboardFocus(SWIGTYPE_p_void.getCPtr(inWindow));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMBringWindowToFront(SWIGTYPE_p_void inWindow) {
    XPlaneWrappersPINVOKE.XPLMBringWindowToFront(SWIGTYPE_p_void.getCPtr(inWindow));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsWindowInFront(SWIGTYPE_p_void inWindow) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsWindowInFront(SWIGTYPE_p_void.getCPtr(inWindow));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMRegisterKeySniffer(SWIGTYPE_p_f_char_int_char_p_void__int inCallback, int inBeforeWindows, SWIGTYPE_p_void inRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMRegisterKeySniffer(SWIGTYPE_p_f_char_int_char_p_void__int.getCPtr(inCallback), inBeforeWindows, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMUnregisterKeySniffer(SWIGTYPE_p_f_char_int_char_p_void__int inCallback, int inBeforeWindows, SWIGTYPE_p_void inRefcon) {
    int ret = XPlaneWrappersPINVOKE.XPLMUnregisterKeySniffer(SWIGTYPE_p_f_char_int_char_p_void__int.getCPtr(inCallback), inBeforeWindows, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMRegisterHotKey(char inVirtualKey, int inFlags, string inDescription, SWIGTYPE_p_f_p_void__void inCallback, SWIGTYPE_p_void inRefcon) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMRegisterHotKey(inVirtualKey, inFlags, inDescription, SWIGTYPE_p_f_p_void__void.getCPtr(inCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMUnregisterHotKey(SWIGTYPE_p_void inHotKey) {
    XPlaneWrappersPINVOKE.XPLMUnregisterHotKey(SWIGTYPE_p_void.getCPtr(inHotKey));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMCountHotKeys() {
    int ret = XPlaneWrappersPINVOKE.XPLMCountHotKeys();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMGetNthHotKey(int inIndex) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMGetNthHotKey(inIndex);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetHotKeyInfo(SWIGTYPE_p_void inHotKey, string outVirtualKey, SWIGTYPE_p_int outFlags, string outDescription, SWIGTYPE_p_int outPlugin) {
    XPlaneWrappersPINVOKE.XPLMGetHotKeyInfo(SWIGTYPE_p_void.getCPtr(inHotKey), outVirtualKey, SWIGTYPE_p_int.getCPtr(outFlags), outDescription, SWIGTYPE_p_int.getCPtr(outPlugin));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetHotKeyCombination(SWIGTYPE_p_void inHotKey, char inVirtualKey, int inFlags) {
    XPlaneWrappersPINVOKE.XPLMSetHotKeyCombination(SWIGTYPE_p_void.getCPtr(inHotKey), inVirtualKey, inFlags);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float XPLMGetElapsedTime() {
    float ret = XPlaneWrappersPINVOKE.XPLMGetElapsedTime();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetCycleNumber() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetCycleNumber();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMRegisterFlightLoopCallback(SWIGTYPE_p_f_float_float_int_p_void__float inFlightLoop, float inInterval, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMRegisterFlightLoopCallback(SWIGTYPE_p_f_float_float_int_p_void__float.getCPtr(inFlightLoop), inInterval, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMUnregisterFlightLoopCallback(SWIGTYPE_p_f_float_float_int_p_void__float inFlightLoop, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMUnregisterFlightLoopCallback(SWIGTYPE_p_f_float_float_int_p_void__float.getCPtr(inFlightLoop), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetFlightLoopCallbackInterval(SWIGTYPE_p_f_float_float_int_p_void__float inFlightLoop, float inInterval, int inRelativeToNow, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMSetFlightLoopCallbackInterval(SWIGTYPE_p_f_float_float_int_p_void__float.getCPtr(inFlightLoop), inInterval, inRelativeToNow, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMCreateFlightLoop(XPLMCreateFlightLoop_t inParams) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateFlightLoop(XPLMCreateFlightLoop_t.getCPtr(inParams));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyFlightLoop(SWIGTYPE_p_void inFlightLoopID) {
    XPlaneWrappersPINVOKE.XPLMDestroyFlightLoop(SWIGTYPE_p_void.getCPtr(inFlightLoopID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMScheduleFlightLoop(SWIGTYPE_p_void inFlightLoopID, float inInterval, int inRelativeToNow) {
    XPlaneWrappersPINVOKE.XPLMScheduleFlightLoop(SWIGTYPE_p_void.getCPtr(inFlightLoopID), inInterval, inRelativeToNow);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetSystemPath(string outSystemPath) {
    XPlaneWrappersPINVOKE.XPLMGetSystemPath(outSystemPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetPrefsPath(string outPrefsPath) {
    XPlaneWrappersPINVOKE.XPLMGetPrefsPath(outPrefsPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string XPLMGetDirectorySeparator() {
    string ret = XPlaneWrappersPINVOKE.XPLMGetDirectorySeparator();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string XPLMExtractFileAndPath(string inFullPath) {
    string ret = XPlaneWrappersPINVOKE.XPLMExtractFileAndPath(inFullPath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMGetDirectoryContents(string inDirectoryPath, int inFirstReturn, string outFileNames, int inFileNameBufSize, SWIGTYPE_p_p_char outIndices, int inIndexCount, SWIGTYPE_p_int outTotalFiles, SWIGTYPE_p_int outReturnedFiles) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetDirectoryContents(inDirectoryPath, inFirstReturn, outFileNames, inFileNameBufSize, SWIGTYPE_p_p_char.getCPtr(outIndices), inIndexCount, SWIGTYPE_p_int.getCPtr(outTotalFiles), SWIGTYPE_p_int.getCPtr(outReturnedFiles));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMLoadDataFile(int inFileType, string inFilePath) {
    int ret = XPlaneWrappersPINVOKE.XPLMLoadDataFile(inFileType, inFilePath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMSaveDataFile(int inFileType, string inFilePath) {
    int ret = XPlaneWrappersPINVOKE.XPLMSaveDataFile(inFileType, inFilePath);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMGetVersions(SWIGTYPE_p_int outXPlaneVersion, SWIGTYPE_p_int outXPLMVersion, SWIGTYPE_p_int outHostID) {
    XPlaneWrappersPINVOKE.XPLMGetVersions(SWIGTYPE_p_int.getCPtr(outXPlaneVersion), SWIGTYPE_p_int.getCPtr(outXPLMVersion), SWIGTYPE_p_int.getCPtr(outHostID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetLanguage() {
    int ret = XPlaneWrappersPINVOKE.XPLMGetLanguage();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMFindSymbol(string inString) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMFindSymbol(inString);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMSetErrorCallback(SWIGTYPE_p_f_p_q_const__char__void inCallback) {
    XPlaneWrappersPINVOKE.XPLMSetErrorCallback(SWIGTYPE_p_f_p_q_const__char__void.getCPtr(inCallback));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDebugString(string inString) {
    XPlaneWrappersPINVOKE.XPLMDebugString(inString);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSpeakString(string inString) {
    XPlaneWrappersPINVOKE.XPLMSpeakString(inString);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string XPLMGetVirtualKeyDescription(char inVirtualKey) {
    string ret = XPlaneWrappersPINVOKE.XPLMGetVirtualKeyDescription(inVirtualKey);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMReloadScenery() {
    XPlaneWrappersPINVOKE.XPLMReloadScenery();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMFindCommand(string inName) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMFindCommand(inName);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMCommandBegin(SWIGTYPE_p_void inCommand) {
    XPlaneWrappersPINVOKE.XPLMCommandBegin(SWIGTYPE_p_void.getCPtr(inCommand));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMCommandEnd(SWIGTYPE_p_void inCommand) {
    XPlaneWrappersPINVOKE.XPLMCommandEnd(SWIGTYPE_p_void.getCPtr(inCommand));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMCommandOnce(SWIGTYPE_p_void inCommand) {
    XPlaneWrappersPINVOKE.XPLMCommandOnce(SWIGTYPE_p_void.getCPtr(inCommand));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMCreateCommand(string inName, string inDescription) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateCommand(inName, inDescription);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMRegisterCommandHandler(SWIGTYPE_p_void inComand, SWIGTYPE_p_f_p_void_int_p_void__int inHandler, int inBefore, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMRegisterCommandHandler(SWIGTYPE_p_void.getCPtr(inComand), SWIGTYPE_p_f_p_void_int_p_void__int.getCPtr(inHandler), inBefore, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMUnregisterCommandHandler(SWIGTYPE_p_void inComand, SWIGTYPE_p_f_p_void_int_p_void__int inHandler, int inBefore, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMUnregisterCommandHandler(SWIGTYPE_p_void.getCPtr(inComand), SWIGTYPE_p_f_p_void_int_p_void__int.getCPtr(inHandler), inBefore, SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMFindPluginsMenu() {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMFindPluginsMenu();
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMFindAircraftMenu() {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMFindAircraftMenu();
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMCreateMenu(string inName, SWIGTYPE_p_void inParentMenu, int inParentItem, SWIGTYPE_p_f_p_void_p_void__void inHandler, SWIGTYPE_p_void inMenuRef) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateMenu(inName, SWIGTYPE_p_void.getCPtr(inParentMenu), inParentItem, SWIGTYPE_p_f_p_void_p_void__void.getCPtr(inHandler), SWIGTYPE_p_void.getCPtr(inMenuRef));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyMenu(SWIGTYPE_p_void inMenuID) {
    XPlaneWrappersPINVOKE.XPLMDestroyMenu(SWIGTYPE_p_void.getCPtr(inMenuID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMClearAllMenuItems(SWIGTYPE_p_void inMenuID) {
    XPlaneWrappersPINVOKE.XPLMClearAllMenuItems(SWIGTYPE_p_void.getCPtr(inMenuID));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMAppendMenuItem(SWIGTYPE_p_void inMenu, string inItemName, SWIGTYPE_p_void inItemRef, int inDeprecatedAndIgnored) {
    int ret = XPlaneWrappersPINVOKE.XPLMAppendMenuItem(SWIGTYPE_p_void.getCPtr(inMenu), inItemName, SWIGTYPE_p_void.getCPtr(inItemRef), inDeprecatedAndIgnored);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMAppendMenuItemWithCommand(SWIGTYPE_p_void inMenu, string inItemName, SWIGTYPE_p_void inCommandToExecute) {
    int ret = XPlaneWrappersPINVOKE.XPLMAppendMenuItemWithCommand(SWIGTYPE_p_void.getCPtr(inMenu), inItemName, SWIGTYPE_p_void.getCPtr(inCommandToExecute));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMAppendMenuSeparator(SWIGTYPE_p_void inMenu) {
    XPlaneWrappersPINVOKE.XPLMAppendMenuSeparator(SWIGTYPE_p_void.getCPtr(inMenu));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMSetMenuItemName(SWIGTYPE_p_void inMenu, int inIndex, string inItemName, int inDeprecatedAndIgnored) {
    XPlaneWrappersPINVOKE.XPLMSetMenuItemName(SWIGTYPE_p_void.getCPtr(inMenu), inIndex, inItemName, inDeprecatedAndIgnored);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMCheckMenuItem(SWIGTYPE_p_void inMenu, int index, int inCheck) {
    XPlaneWrappersPINVOKE.XPLMCheckMenuItem(SWIGTYPE_p_void.getCPtr(inMenu), index, inCheck);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMCheckMenuItemState(SWIGTYPE_p_void inMenu, int index, SWIGTYPE_p_int outCheck) {
    XPlaneWrappersPINVOKE.XPLMCheckMenuItemState(SWIGTYPE_p_void.getCPtr(inMenu), index, SWIGTYPE_p_int.getCPtr(outCheck));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMEnableMenuItem(SWIGTYPE_p_void inMenu, int index, int enabled) {
    XPlaneWrappersPINVOKE.XPLMEnableMenuItem(SWIGTYPE_p_void.getCPtr(inMenu), index, enabled);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMRemoveMenuItem(SWIGTYPE_p_void inMenu, int inIndex) {
    XPlaneWrappersPINVOKE.XPLMRemoveMenuItem(SWIGTYPE_p_void.getCPtr(inMenu), inIndex);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMGetMETARForAirport(string airport_id, XPLMFixedString150_t outMETAR) {
    XPlaneWrappersPINVOKE.XPLMGetMETARForAirport(airport_id, XPLMFixedString150_t.getCPtr(outMETAR));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMGetWeatherAtLocation(double latitude, double longitude, double altitude_m, XPLMWeatherInfo_t out_info) {
    int ret = XPlaneWrappersPINVOKE.XPLMGetWeatherAtLocation(latitude, longitude, altitude_m, XPLMWeatherInfo_t.getCPtr(out_info));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMControlCamera(int inHowLong, SWIGTYPE_p_f_p_XPLMCameraPosition_t_int_p_void__int inControlFunc, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMControlCamera(inHowLong, SWIGTYPE_p_f_p_XPLMCameraPosition_t_int_p_void__int.getCPtr(inControlFunc), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDontControlCamera() {
    XPlaneWrappersPINVOKE.XPLMDontControlCamera();
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMIsCameraBeingControlled(SWIGTYPE_p_int outCameraControlDuration) {
    int ret = XPlaneWrappersPINVOKE.XPLMIsCameraBeingControlled(SWIGTYPE_p_int.getCPtr(outCameraControlDuration));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMReadCameraPosition(XPLMCameraPosition_t outCameraPosition) {
    XPlaneWrappersPINVOKE.XPLMReadCameraPosition(XPLMCameraPosition_t.getCPtr(outCameraPosition));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPLMCreateMapLayer(XPLMCreateMapLayer_t inParams) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateMapLayer(XPLMCreateMapLayer_t.getCPtr(inParams));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPLMDestroyMapLayer(SWIGTYPE_p_void inLayer) {
    int ret = XPlaneWrappersPINVOKE.XPLMDestroyMapLayer(SWIGTYPE_p_void.getCPtr(inLayer));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMRegisterMapCreationHook(SWIGTYPE_p_f_p_q_const__char_p_void__void callback, SWIGTYPE_p_void refcon) {
    XPlaneWrappersPINVOKE.XPLMRegisterMapCreationHook(SWIGTYPE_p_f_p_q_const__char_p_void__void.getCPtr(callback), SWIGTYPE_p_void.getCPtr(refcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMMapExists(string mapIdentifier) {
    int ret = XPlaneWrappersPINVOKE.XPLMMapExists(mapIdentifier);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDrawMapIconFromSheet(SWIGTYPE_p_void layer, string inPngPath, int s, int t, int ds, int dt, float mapX, float mapY, int orientation, float rotationDegrees, float mapWidth) {
    XPlaneWrappersPINVOKE.XPLMDrawMapIconFromSheet(SWIGTYPE_p_void.getCPtr(layer), inPngPath, s, t, ds, dt, mapX, mapY, orientation, rotationDegrees, mapWidth);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMDrawMapLabel(SWIGTYPE_p_void layer, string inText, float mapX, float mapY, int orientation, float rotationDegrees) {
    XPlaneWrappersPINVOKE.XPLMDrawMapLabel(SWIGTYPE_p_void.getCPtr(layer), inText, mapX, mapY, orientation, rotationDegrees);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMMapProject(SWIGTYPE_p_void projection, double latitude, double longitude, SWIGTYPE_p_float outX, SWIGTYPE_p_float outY) {
    XPlaneWrappersPINVOKE.XPLMMapProject(SWIGTYPE_p_void.getCPtr(projection), latitude, longitude, SWIGTYPE_p_float.getCPtr(outX), SWIGTYPE_p_float.getCPtr(outY));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMMapUnproject(SWIGTYPE_p_void projection, float mapX, float mapY, SWIGTYPE_p_double outLatitude, SWIGTYPE_p_double outLongitude) {
    XPlaneWrappersPINVOKE.XPLMMapUnproject(SWIGTYPE_p_void.getCPtr(projection), mapX, mapY, SWIGTYPE_p_double.getCPtr(outLatitude), SWIGTYPE_p_double.getCPtr(outLongitude));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static float XPLMMapScaleMeter(SWIGTYPE_p_void projection, float mapX, float mapY) {
    float ret = XPlaneWrappersPINVOKE.XPLMMapScaleMeter(SWIGTYPE_p_void.getCPtr(projection), mapX, mapY);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XPLMMapGetNorthHeading(SWIGTYPE_p_void projection, float mapX, float mapY) {
    float ret = XPlaneWrappersPINVOKE.XPLMMapGetNorthHeading(SWIGTYPE_p_void.getCPtr(projection), mapX, mapY);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMCreateProbe(int inProbeType) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMCreateProbe(inProbeType);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMDestroyProbe(SWIGTYPE_p_void inProbe) {
    XPlaneWrappersPINVOKE.XPLMDestroyProbe(SWIGTYPE_p_void.getCPtr(inProbe));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMProbeTerrainXYZ(SWIGTYPE_p_void inProbe, float inX, float inY, float inZ, XPLMProbeInfo_t outInfo) {
    int ret = XPlaneWrappersPINVOKE.XPLMProbeTerrainXYZ(SWIGTYPE_p_void.getCPtr(inProbe), inX, inY, inZ, XPLMProbeInfo_t.getCPtr(outInfo));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XPLMGetMagneticVariation(double latitude, double longitude) {
    float ret = XPlaneWrappersPINVOKE.XPLMGetMagneticVariation(latitude, longitude);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XPLMDegTrueToDegMagnetic(float headingDegreesTrue) {
    float ret = XPlaneWrappersPINVOKE.XPLMDegTrueToDegMagnetic(headingDegreesTrue);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float XPLMDegMagneticToDegTrue(float headingDegreesMagnetic) {
    float ret = XPlaneWrappersPINVOKE.XPLMDegMagneticToDegTrue(headingDegreesMagnetic);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPLMLoadObject(string inPath) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPLMLoadObject(inPath);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLMLoadObjectAsync(string inPath, SWIGTYPE_p_f_p_void_p_void__void inCallback, SWIGTYPE_p_void inRefcon) {
    XPlaneWrappersPINVOKE.XPLMLoadObjectAsync(inPath, SWIGTYPE_p_f_p_void_p_void__void.getCPtr(inCallback), SWIGTYPE_p_void.getCPtr(inRefcon));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPLMUnloadObject(SWIGTYPE_p_void inObject) {
    XPlaneWrappersPINVOKE.XPLMUnloadObject(SWIGTYPE_p_void.getCPtr(inObject));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPLMLookupObjects(string inPath, float inLatitude, float inLongitude, SWIGTYPE_p_f_p_q_const__char_p_void__void enumerator, SWIGTYPE_p_void ref_) {
    int ret = XPlaneWrappersPINVOKE.XPLMLookupObjects(inPath, inLatitude, inLongitude, SWIGTYPE_p_f_p_q_const__char_p_void__void.getCPtr(enumerator), SWIGTYPE_p_void.getCPtr(ref_));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPUCreateWidgets(XPWidgetCreate_t inWidgetDefs, int inCount, SWIGTYPE_p_void inParamParent, SWIGTYPE_p_p_void ioWidgets) {
    XPlaneWrappersPINVOKE.XPUCreateWidgets(XPWidgetCreate_t.getCPtr(inWidgetDefs), inCount, SWIGTYPE_p_void.getCPtr(inParamParent), SWIGTYPE_p_p_void.getCPtr(ioWidgets));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPUMoveWidgetBy(SWIGTYPE_p_void inWidget, int inDeltaX, int inDeltaY) {
    XPlaneWrappersPINVOKE.XPUMoveWidgetBy(SWIGTYPE_p_void.getCPtr(inWidget), inDeltaX, inDeltaY);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPUFixedLayout(int inMessage, SWIGTYPE_p_void inWidget, SWIGTYPE_p_intptr_t inParam1, SWIGTYPE_p_intptr_t inParam2) {
    int ret = XPlaneWrappersPINVOKE.XPUFixedLayout(inMessage, SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_intptr_t.getCPtr(inParam1), SWIGTYPE_p_intptr_t.getCPtr(inParam2));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPUSelectIfNeeded(int inMessage, SWIGTYPE_p_void inWidget, SWIGTYPE_p_intptr_t inParam1, SWIGTYPE_p_intptr_t inParam2, int inEatClick) {
    int ret = XPlaneWrappersPINVOKE.XPUSelectIfNeeded(inMessage, SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_intptr_t.getCPtr(inParam1), SWIGTYPE_p_intptr_t.getCPtr(inParam2), inEatClick);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPUDefocusKeyboard(int inMessage, SWIGTYPE_p_void inWidget, SWIGTYPE_p_intptr_t inParam1, SWIGTYPE_p_intptr_t inParam2, int inEatClick) {
    int ret = XPlaneWrappersPINVOKE.XPUDefocusKeyboard(inMessage, SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_intptr_t.getCPtr(inParam1), SWIGTYPE_p_intptr_t.getCPtr(inParam2), inEatClick);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int XPUDragWidget(int inMessage, SWIGTYPE_p_void inWidget, SWIGTYPE_p_intptr_t inParam1, SWIGTYPE_p_intptr_t inParam2, int inLeft, int inTop, int inRight, int inBottom) {
    int ret = XPlaneWrappersPINVOKE.XPUDragWidget(inMessage, SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_intptr_t.getCPtr(inParam1), SWIGTYPE_p_intptr_t.getCPtr(inParam2), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPCreateWidget(int inLeft, int inTop, int inRight, int inBottom, int inVisible, string inDescriptor, int inIsRoot, SWIGTYPE_p_void inContainer, int inClass) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPCreateWidget(inLeft, inTop, inRight, inBottom, inVisible, inDescriptor, inIsRoot, SWIGTYPE_p_void.getCPtr(inContainer), inClass);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPCreateCustomWidget(int inLeft, int inTop, int inRight, int inBottom, int inVisible, string inDescriptor, int inIsRoot, SWIGTYPE_p_void inContainer, SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int inCallback) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPCreateCustomWidget(inLeft, inTop, inRight, inBottom, inVisible, inDescriptor, inIsRoot, SWIGTYPE_p_void.getCPtr(inContainer), SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int.getCPtr(inCallback));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPDestroyWidget(SWIGTYPE_p_void inWidget, int inDestroyChildren) {
    XPlaneWrappersPINVOKE.XPDestroyWidget(SWIGTYPE_p_void.getCPtr(inWidget), inDestroyChildren);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPSendMessageToWidget(SWIGTYPE_p_void inWidget, int inMessage, int inMode, SWIGTYPE_p_intptr_t inParam1, SWIGTYPE_p_intptr_t inParam2) {
    int ret = XPlaneWrappersPINVOKE.XPSendMessageToWidget(SWIGTYPE_p_void.getCPtr(inWidget), inMessage, inMode, SWIGTYPE_p_intptr_t.getCPtr(inParam1), SWIGTYPE_p_intptr_t.getCPtr(inParam2));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPPlaceWidgetWithin(SWIGTYPE_p_void inSubWidget, SWIGTYPE_p_void inContainer) {
    XPlaneWrappersPINVOKE.XPPlaceWidgetWithin(SWIGTYPE_p_void.getCPtr(inSubWidget), SWIGTYPE_p_void.getCPtr(inContainer));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPCountChildWidgets(SWIGTYPE_p_void inWidget) {
    int ret = XPlaneWrappersPINVOKE.XPCountChildWidgets(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPGetNthChildWidget(SWIGTYPE_p_void inWidget, int inIndex) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetNthChildWidget(SWIGTYPE_p_void.getCPtr(inWidget), inIndex);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPGetParentWidget(SWIGTYPE_p_void inWidget) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetParentWidget(SWIGTYPE_p_void.getCPtr(inWidget));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPShowWidget(SWIGTYPE_p_void inWidget) {
    XPlaneWrappersPINVOKE.XPShowWidget(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPHideWidget(SWIGTYPE_p_void inWidget) {
    XPlaneWrappersPINVOKE.XPHideWidget(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPIsWidgetVisible(SWIGTYPE_p_void inWidget) {
    int ret = XPlaneWrappersPINVOKE.XPIsWidgetVisible(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPFindRootWidget(SWIGTYPE_p_void inWidget) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPFindRootWidget(SWIGTYPE_p_void.getCPtr(inWidget));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPBringRootWidgetToFront(SWIGTYPE_p_void inWidget) {
    XPlaneWrappersPINVOKE.XPBringRootWidgetToFront(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPIsWidgetInFront(SWIGTYPE_p_void inWidget) {
    int ret = XPlaneWrappersPINVOKE.XPIsWidgetInFront(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPGetWidgetGeometry(SWIGTYPE_p_void inWidget, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPGetWidgetGeometry(SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPSetWidgetGeometry(SWIGTYPE_p_void inWidget, int inLeft, int inTop, int inRight, int inBottom) {
    XPlaneWrappersPINVOKE.XPSetWidgetGeometry(SWIGTYPE_p_void.getCPtr(inWidget), inLeft, inTop, inRight, inBottom);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPGetWidgetForLocation(SWIGTYPE_p_void inContainer, int inXOffset, int inYOffset, int inRecursive, int inVisibleOnly) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetWidgetForLocation(SWIGTYPE_p_void.getCPtr(inContainer), inXOffset, inYOffset, inRecursive, inVisibleOnly);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPGetWidgetExposedGeometry(SWIGTYPE_p_void inWidgetID, SWIGTYPE_p_int outLeft, SWIGTYPE_p_int outTop, SWIGTYPE_p_int outRight, SWIGTYPE_p_int outBottom) {
    XPlaneWrappersPINVOKE.XPGetWidgetExposedGeometry(SWIGTYPE_p_void.getCPtr(inWidgetID), SWIGTYPE_p_int.getCPtr(outLeft), SWIGTYPE_p_int.getCPtr(outTop), SWIGTYPE_p_int.getCPtr(outRight), SWIGTYPE_p_int.getCPtr(outBottom));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPSetWidgetDescriptor(SWIGTYPE_p_void inWidget, string inDescriptor) {
    XPlaneWrappersPINVOKE.XPSetWidgetDescriptor(SWIGTYPE_p_void.getCPtr(inWidget), inDescriptor);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int XPGetWidgetDescriptor(SWIGTYPE_p_void inWidget, string outDescriptor, int inMaxDescLength) {
    int ret = XPlaneWrappersPINVOKE.XPGetWidgetDescriptor(SWIGTYPE_p_void.getCPtr(inWidget), outDescriptor, inMaxDescLength);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPGetWidgetUnderlyingWindow(SWIGTYPE_p_void inWidget) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetWidgetUnderlyingWindow(SWIGTYPE_p_void.getCPtr(inWidget));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPSetWidgetProperty(SWIGTYPE_p_void inWidget, int inProperty, SWIGTYPE_p_intptr_t inValue) {
    XPlaneWrappersPINVOKE.XPSetWidgetProperty(SWIGTYPE_p_void.getCPtr(inWidget), inProperty, SWIGTYPE_p_intptr_t.getCPtr(inValue));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_intptr_t XPGetWidgetProperty(SWIGTYPE_p_void inWidget, int inProperty, SWIGTYPE_p_int inExists) {
    SWIGTYPE_p_intptr_t ret = new SWIGTYPE_p_intptr_t(XPlaneWrappersPINVOKE.XPGetWidgetProperty(SWIGTYPE_p_void.getCPtr(inWidget), inProperty, SWIGTYPE_p_int.getCPtr(inExists)), true);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void XPSetKeyboardFocus(SWIGTYPE_p_void inWidget) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPSetKeyboardFocus(SWIGTYPE_p_void.getCPtr(inWidget));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPLoseKeyboardFocus(SWIGTYPE_p_void inWidget) {
    XPlaneWrappersPINVOKE.XPLoseKeyboardFocus(SWIGTYPE_p_void.getCPtr(inWidget));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void XPGetWidgetWithFocus() {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetWidgetWithFocus();
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPAddWidgetCallback(SWIGTYPE_p_void inWidget, SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int inNewCallback) {
    XPlaneWrappersPINVOKE.XPAddWidgetCallback(SWIGTYPE_p_void.getCPtr(inWidget), SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int.getCPtr(inNewCallback));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int XPGetWidgetClassFunc(int inWidgetClass) {
    global::System.IntPtr cPtr = XPlaneWrappersPINVOKE.XPGetWidgetClassFunc(inWidgetClass);
    SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_f_int_p_void_intptr_t_intptr_t__int(cPtr, false);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XPDrawWindow(int inX1, int inY1, int inX2, int inY2, int inStyle) {
    XPlaneWrappersPINVOKE.XPDrawWindow(inX1, inY1, inX2, inY2, inStyle);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPGetWindowDefaultDimensions(int inStyle, SWIGTYPE_p_int outWidth, SWIGTYPE_p_int outHeight) {
    XPlaneWrappersPINVOKE.XPGetWindowDefaultDimensions(inStyle, SWIGTYPE_p_int.getCPtr(outWidth), SWIGTYPE_p_int.getCPtr(outHeight));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPDrawElement(int inX1, int inY1, int inX2, int inY2, int inStyle, int inLit) {
    XPlaneWrappersPINVOKE.XPDrawElement(inX1, inY1, inX2, inY2, inStyle, inLit);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPGetElementDefaultDimensions(int inStyle, SWIGTYPE_p_int outWidth, SWIGTYPE_p_int outHeight, SWIGTYPE_p_int outCanBeLit) {
    XPlaneWrappersPINVOKE.XPGetElementDefaultDimensions(inStyle, SWIGTYPE_p_int.getCPtr(outWidth), SWIGTYPE_p_int.getCPtr(outHeight), SWIGTYPE_p_int.getCPtr(outCanBeLit));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPDrawTrack(int inX1, int inY1, int inX2, int inY2, int inMin, int inMax, int inValue, int inTrackStyle, int inLit) {
    XPlaneWrappersPINVOKE.XPDrawTrack(inX1, inY1, inX2, inY2, inMin, inMax, inValue, inTrackStyle, inLit);
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPGetTrackDefaultDimensions(int inStyle, SWIGTYPE_p_int outWidth, SWIGTYPE_p_int outCanBeLit) {
    XPlaneWrappersPINVOKE.XPGetTrackDefaultDimensions(inStyle, SWIGTYPE_p_int.getCPtr(outWidth), SWIGTYPE_p_int.getCPtr(outCanBeLit));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void XPGetTrackMetrics(int inX1, int inY1, int inX2, int inY2, int inMin, int inMax, int inValue, int inTrackStyle, SWIGTYPE_p_int outIsVertical, SWIGTYPE_p_int outDownBtnSize, SWIGTYPE_p_int outDownPageSize, SWIGTYPE_p_int outThumbSize, SWIGTYPE_p_int outUpPageSize, SWIGTYPE_p_int outUpBtnSize) {
    XPlaneWrappersPINVOKE.XPGetTrackMetrics(inX1, inY1, inX2, inY2, inMin, inMax, inValue, inTrackStyle, SWIGTYPE_p_int.getCPtr(outIsVertical), SWIGTYPE_p_int.getCPtr(outDownBtnSize), SWIGTYPE_p_int.getCPtr(outDownPageSize), SWIGTYPE_p_int.getCPtr(outThumbSize), SWIGTYPE_p_int.getCPtr(outUpPageSize), SWIGTYPE_p_int.getCPtr(outUpBtnSize));
    if (XPlaneWrappersPINVOKE.SWIGPendingException.Pending) throw XPlaneWrappersPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly int __APPLE__ = XPlaneWrappersPINVOKE.__APPLE___get();
  public static readonly int XPLM200 = XPlaneWrappersPINVOKE.XPLM200_get();
  public static readonly int XPLM210 = XPlaneWrappersPINVOKE.XPLM210_get();
  public static readonly int XPLM300 = XPlaneWrappersPINVOKE.XPLM300_get();
  public static readonly int XPLM301 = XPlaneWrappersPINVOKE.XPLM301_get();
  public static readonly int XPLM302 = XPlaneWrappersPINVOKE.XPLM302_get();
  public static readonly int XPLM303 = XPlaneWrappersPINVOKE.XPLM303_get();
  public static readonly int XPLM400 = XPlaneWrappersPINVOKE.XPLM400_get();
  public static readonly int XPLM410 = XPlaneWrappersPINVOKE.XPLM410_get();
  public static readonly string AEROFORM_PLUGIN_NAME = XPlaneWrappersPINVOKE.AEROFORM_PLUGIN_NAME_get();
  public static readonly string AEROFORM_PLUGIN_SIG = XPlaneWrappersPINVOKE.AEROFORM_PLUGIN_SIG_get();
  public static readonly string AEROFORM_PLUGIN_DESC = XPlaneWrappersPINVOKE.AEROFORM_PLUGIN_DESC_get();
  public static readonly string AEROFORM_VERSION = XPlaneWrappersPINVOKE.AEROFORM_VERSION_get();
  public static readonly string AEROFORM_AUTHOR = XPlaneWrappersPINVOKE.AEROFORM_AUTHOR_get();
  public static readonly int APL = XPlaneWrappersPINVOKE.APL_get();
  public static readonly int IBM = XPlaneWrappersPINVOKE.IBM_get();
  public static readonly int LIN = XPlaneWrappersPINVOKE.LIN_get();
  public static readonly string AEROFORM_PLUGIN_FILENAME = XPlaneWrappersPINVOKE.AEROFORM_PLUGIN_FILENAME_get();
  public static readonly string AEROFORM_BRIDGE_LIB_FILENAME = XPlaneWrappersPINVOKE.AEROFORM_BRIDGE_LIB_FILENAME_get();
  public static readonly int XPLM_NO_PLUGIN_ID = XPlaneWrappersPINVOKE.XPLM_NO_PLUGIN_ID_get();
  public static readonly int XPLM_PLUGIN_XPLANE = XPlaneWrappersPINVOKE.XPLM_PLUGIN_XPLANE_get();
  public static readonly int kXPLM_Version = XPlaneWrappersPINVOKE.kXPLM_Version_get();
  public static readonly int xplm_ShiftFlag = XPlaneWrappersPINVOKE.xplm_ShiftFlag_get();
  public static readonly int xplm_OptionAltFlag = XPlaneWrappersPINVOKE.xplm_OptionAltFlag_get();
  public static readonly int xplm_ControlFlag = XPlaneWrappersPINVOKE.xplm_ControlFlag_get();
  public static readonly int xplm_DownFlag = XPlaneWrappersPINVOKE.xplm_DownFlag_get();
  public static readonly int xplm_UpFlag = XPlaneWrappersPINVOKE.xplm_UpFlag_get();

  public static readonly int XPLM_KEY_RETURN = XPlaneWrappersPINVOKE.XPLM_KEY_RETURN_get();
  public static readonly int XPLM_KEY_ESCAPE = XPlaneWrappersPINVOKE.XPLM_KEY_ESCAPE_get();
  public static readonly int XPLM_KEY_TAB = XPlaneWrappersPINVOKE.XPLM_KEY_TAB_get();
  public static readonly int XPLM_KEY_DELETE = XPlaneWrappersPINVOKE.XPLM_KEY_DELETE_get();
  public static readonly int XPLM_KEY_LEFT = XPlaneWrappersPINVOKE.XPLM_KEY_LEFT_get();
  public static readonly int XPLM_KEY_RIGHT = XPlaneWrappersPINVOKE.XPLM_KEY_RIGHT_get();
  public static readonly int XPLM_KEY_UP = XPlaneWrappersPINVOKE.XPLM_KEY_UP_get();
  public static readonly int XPLM_KEY_DOWN = XPlaneWrappersPINVOKE.XPLM_KEY_DOWN_get();
  public static readonly int XPLM_KEY_0 = XPlaneWrappersPINVOKE.XPLM_KEY_0_get();
  public static readonly int XPLM_KEY_1 = XPlaneWrappersPINVOKE.XPLM_KEY_1_get();
  public static readonly int XPLM_KEY_2 = XPlaneWrappersPINVOKE.XPLM_KEY_2_get();
  public static readonly int XPLM_KEY_3 = XPlaneWrappersPINVOKE.XPLM_KEY_3_get();
  public static readonly int XPLM_KEY_4 = XPlaneWrappersPINVOKE.XPLM_KEY_4_get();
  public static readonly int XPLM_KEY_5 = XPlaneWrappersPINVOKE.XPLM_KEY_5_get();
  public static readonly int XPLM_KEY_6 = XPlaneWrappersPINVOKE.XPLM_KEY_6_get();
  public static readonly int XPLM_KEY_7 = XPlaneWrappersPINVOKE.XPLM_KEY_7_get();
  public static readonly int XPLM_KEY_8 = XPlaneWrappersPINVOKE.XPLM_KEY_8_get();
  public static readonly int XPLM_KEY_9 = XPlaneWrappersPINVOKE.XPLM_KEY_9_get();
  public static readonly int XPLM_KEY_DECIMAL = XPlaneWrappersPINVOKE.XPLM_KEY_DECIMAL_get();
  public static readonly int XPLM_VK_BACK = XPlaneWrappersPINVOKE.XPLM_VK_BACK_get();
  public static readonly int XPLM_VK_TAB = XPlaneWrappersPINVOKE.XPLM_VK_TAB_get();
  public static readonly int XPLM_VK_CLEAR = XPlaneWrappersPINVOKE.XPLM_VK_CLEAR_get();
  public static readonly int XPLM_VK_RETURN = XPlaneWrappersPINVOKE.XPLM_VK_RETURN_get();
  public static readonly int XPLM_VK_ESCAPE = XPlaneWrappersPINVOKE.XPLM_VK_ESCAPE_get();
  public static readonly int XPLM_VK_SPACE = XPlaneWrappersPINVOKE.XPLM_VK_SPACE_get();
  public static readonly int XPLM_VK_PRIOR = XPlaneWrappersPINVOKE.XPLM_VK_PRIOR_get();
  public static readonly int XPLM_VK_NEXT = XPlaneWrappersPINVOKE.XPLM_VK_NEXT_get();
  public static readonly int XPLM_VK_END = XPlaneWrappersPINVOKE.XPLM_VK_END_get();
  public static readonly int XPLM_VK_HOME = XPlaneWrappersPINVOKE.XPLM_VK_HOME_get();
  public static readonly int XPLM_VK_LEFT = XPlaneWrappersPINVOKE.XPLM_VK_LEFT_get();
  public static readonly int XPLM_VK_UP = XPlaneWrappersPINVOKE.XPLM_VK_UP_get();
  public static readonly int XPLM_VK_RIGHT = XPlaneWrappersPINVOKE.XPLM_VK_RIGHT_get();
  public static readonly int XPLM_VK_DOWN = XPlaneWrappersPINVOKE.XPLM_VK_DOWN_get();
  public static readonly int XPLM_VK_SELECT = XPlaneWrappersPINVOKE.XPLM_VK_SELECT_get();
  public static readonly int XPLM_VK_PRINT = XPlaneWrappersPINVOKE.XPLM_VK_PRINT_get();
  public static readonly int XPLM_VK_EXECUTE = XPlaneWrappersPINVOKE.XPLM_VK_EXECUTE_get();
  public static readonly int XPLM_VK_SNAPSHOT = XPlaneWrappersPINVOKE.XPLM_VK_SNAPSHOT_get();
  public static readonly int XPLM_VK_INSERT = XPlaneWrappersPINVOKE.XPLM_VK_INSERT_get();
  public static readonly int XPLM_VK_DELETE = XPlaneWrappersPINVOKE.XPLM_VK_DELETE_get();
  public static readonly int XPLM_VK_HELP = XPlaneWrappersPINVOKE.XPLM_VK_HELP_get();
  public static readonly int XPLM_VK_0 = XPlaneWrappersPINVOKE.XPLM_VK_0_get();
  public static readonly int XPLM_VK_1 = XPlaneWrappersPINVOKE.XPLM_VK_1_get();
  public static readonly int XPLM_VK_2 = XPlaneWrappersPINVOKE.XPLM_VK_2_get();
  public static readonly int XPLM_VK_3 = XPlaneWrappersPINVOKE.XPLM_VK_3_get();
  public static readonly int XPLM_VK_4 = XPlaneWrappersPINVOKE.XPLM_VK_4_get();
  public static readonly int XPLM_VK_5 = XPlaneWrappersPINVOKE.XPLM_VK_5_get();
  public static readonly int XPLM_VK_6 = XPlaneWrappersPINVOKE.XPLM_VK_6_get();
  public static readonly int XPLM_VK_7 = XPlaneWrappersPINVOKE.XPLM_VK_7_get();
  public static readonly int XPLM_VK_8 = XPlaneWrappersPINVOKE.XPLM_VK_8_get();
  public static readonly int XPLM_VK_9 = XPlaneWrappersPINVOKE.XPLM_VK_9_get();
  public static readonly int XPLM_VK_A = XPlaneWrappersPINVOKE.XPLM_VK_A_get();
  public static readonly int XPLM_VK_B = XPlaneWrappersPINVOKE.XPLM_VK_B_get();
  public static readonly int XPLM_VK_C = XPlaneWrappersPINVOKE.XPLM_VK_C_get();
  public static readonly int XPLM_VK_D = XPlaneWrappersPINVOKE.XPLM_VK_D_get();
  public static readonly int XPLM_VK_E = XPlaneWrappersPINVOKE.XPLM_VK_E_get();
  public static readonly int XPLM_VK_F = XPlaneWrappersPINVOKE.XPLM_VK_F_get();
  public static readonly int XPLM_VK_G = XPlaneWrappersPINVOKE.XPLM_VK_G_get();
  public static readonly int XPLM_VK_H = XPlaneWrappersPINVOKE.XPLM_VK_H_get();
  public static readonly int XPLM_VK_I = XPlaneWrappersPINVOKE.XPLM_VK_I_get();
  public static readonly int XPLM_VK_J = XPlaneWrappersPINVOKE.XPLM_VK_J_get();
  public static readonly int XPLM_VK_K = XPlaneWrappersPINVOKE.XPLM_VK_K_get();
  public static readonly int XPLM_VK_L = XPlaneWrappersPINVOKE.XPLM_VK_L_get();
  public static readonly int XPLM_VK_M = XPlaneWrappersPINVOKE.XPLM_VK_M_get();
  public static readonly int XPLM_VK_N = XPlaneWrappersPINVOKE.XPLM_VK_N_get();
  public static readonly int XPLM_VK_O = XPlaneWrappersPINVOKE.XPLM_VK_O_get();
  public static readonly int XPLM_VK_P = XPlaneWrappersPINVOKE.XPLM_VK_P_get();
  public static readonly int XPLM_VK_Q = XPlaneWrappersPINVOKE.XPLM_VK_Q_get();
  public static readonly int XPLM_VK_R = XPlaneWrappersPINVOKE.XPLM_VK_R_get();
  public static readonly int XPLM_VK_S = XPlaneWrappersPINVOKE.XPLM_VK_S_get();
  public static readonly int XPLM_VK_T = XPlaneWrappersPINVOKE.XPLM_VK_T_get();
  public static readonly int XPLM_VK_U = XPlaneWrappersPINVOKE.XPLM_VK_U_get();
  public static readonly int XPLM_VK_V = XPlaneWrappersPINVOKE.XPLM_VK_V_get();
  public static readonly int XPLM_VK_W = XPlaneWrappersPINVOKE.XPLM_VK_W_get();
  public static readonly int XPLM_VK_X = XPlaneWrappersPINVOKE.XPLM_VK_X_get();
  public static readonly int XPLM_VK_Y = XPlaneWrappersPINVOKE.XPLM_VK_Y_get();
  public static readonly int XPLM_VK_Z = XPlaneWrappersPINVOKE.XPLM_VK_Z_get();
  public static readonly int XPLM_VK_NUMPAD0 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD0_get();
  public static readonly int XPLM_VK_NUMPAD1 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD1_get();
  public static readonly int XPLM_VK_NUMPAD2 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD2_get();
  public static readonly int XPLM_VK_NUMPAD3 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD3_get();
  public static readonly int XPLM_VK_NUMPAD4 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD4_get();
  public static readonly int XPLM_VK_NUMPAD5 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD5_get();
  public static readonly int XPLM_VK_NUMPAD6 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD6_get();
  public static readonly int XPLM_VK_NUMPAD7 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD7_get();
  public static readonly int XPLM_VK_NUMPAD8 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD8_get();
  public static readonly int XPLM_VK_NUMPAD9 = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD9_get();
  public static readonly int XPLM_VK_MULTIPLY = XPlaneWrappersPINVOKE.XPLM_VK_MULTIPLY_get();
  public static readonly int XPLM_VK_ADD = XPlaneWrappersPINVOKE.XPLM_VK_ADD_get();
  public static readonly int XPLM_VK_SEPARATOR = XPlaneWrappersPINVOKE.XPLM_VK_SEPARATOR_get();
  public static readonly int XPLM_VK_SUBTRACT = XPlaneWrappersPINVOKE.XPLM_VK_SUBTRACT_get();
  public static readonly int XPLM_VK_DECIMAL = XPlaneWrappersPINVOKE.XPLM_VK_DECIMAL_get();
  public static readonly int XPLM_VK_DIVIDE = XPlaneWrappersPINVOKE.XPLM_VK_DIVIDE_get();
  public static readonly int XPLM_VK_F1 = XPlaneWrappersPINVOKE.XPLM_VK_F1_get();
  public static readonly int XPLM_VK_F2 = XPlaneWrappersPINVOKE.XPLM_VK_F2_get();
  public static readonly int XPLM_VK_F3 = XPlaneWrappersPINVOKE.XPLM_VK_F3_get();
  public static readonly int XPLM_VK_F4 = XPlaneWrappersPINVOKE.XPLM_VK_F4_get();
  public static readonly int XPLM_VK_F5 = XPlaneWrappersPINVOKE.XPLM_VK_F5_get();
  public static readonly int XPLM_VK_F6 = XPlaneWrappersPINVOKE.XPLM_VK_F6_get();
  public static readonly int XPLM_VK_F7 = XPlaneWrappersPINVOKE.XPLM_VK_F7_get();
  public static readonly int XPLM_VK_F8 = XPlaneWrappersPINVOKE.XPLM_VK_F8_get();
  public static readonly int XPLM_VK_F9 = XPlaneWrappersPINVOKE.XPLM_VK_F9_get();
  public static readonly int XPLM_VK_F10 = XPlaneWrappersPINVOKE.XPLM_VK_F10_get();
  public static readonly int XPLM_VK_F11 = XPlaneWrappersPINVOKE.XPLM_VK_F11_get();
  public static readonly int XPLM_VK_F12 = XPlaneWrappersPINVOKE.XPLM_VK_F12_get();
  public static readonly int XPLM_VK_F13 = XPlaneWrappersPINVOKE.XPLM_VK_F13_get();
  public static readonly int XPLM_VK_F14 = XPlaneWrappersPINVOKE.XPLM_VK_F14_get();
  public static readonly int XPLM_VK_F15 = XPlaneWrappersPINVOKE.XPLM_VK_F15_get();
  public static readonly int XPLM_VK_F16 = XPlaneWrappersPINVOKE.XPLM_VK_F16_get();
  public static readonly int XPLM_VK_F17 = XPlaneWrappersPINVOKE.XPLM_VK_F17_get();
  public static readonly int XPLM_VK_F18 = XPlaneWrappersPINVOKE.XPLM_VK_F18_get();
  public static readonly int XPLM_VK_F19 = XPlaneWrappersPINVOKE.XPLM_VK_F19_get();
  public static readonly int XPLM_VK_F20 = XPlaneWrappersPINVOKE.XPLM_VK_F20_get();
  public static readonly int XPLM_VK_F21 = XPlaneWrappersPINVOKE.XPLM_VK_F21_get();
  public static readonly int XPLM_VK_F22 = XPlaneWrappersPINVOKE.XPLM_VK_F22_get();
  public static readonly int XPLM_VK_F23 = XPlaneWrappersPINVOKE.XPLM_VK_F23_get();
  public static readonly int XPLM_VK_F24 = XPlaneWrappersPINVOKE.XPLM_VK_F24_get();
  public static readonly int XPLM_VK_EQUAL = XPlaneWrappersPINVOKE.XPLM_VK_EQUAL_get();
  public static readonly int XPLM_VK_MINUS = XPlaneWrappersPINVOKE.XPLM_VK_MINUS_get();
  public static readonly int XPLM_VK_RBRACE = XPlaneWrappersPINVOKE.XPLM_VK_RBRACE_get();
  public static readonly int XPLM_VK_LBRACE = XPlaneWrappersPINVOKE.XPLM_VK_LBRACE_get();
  public static readonly int XPLM_VK_QUOTE = XPlaneWrappersPINVOKE.XPLM_VK_QUOTE_get();
  public static readonly int XPLM_VK_SEMICOLON = XPlaneWrappersPINVOKE.XPLM_VK_SEMICOLON_get();
  public static readonly int XPLM_VK_BACKSLASH = XPlaneWrappersPINVOKE.XPLM_VK_BACKSLASH_get();
  public static readonly int XPLM_VK_COMMA = XPlaneWrappersPINVOKE.XPLM_VK_COMMA_get();
  public static readonly int XPLM_VK_SLASH = XPlaneWrappersPINVOKE.XPLM_VK_SLASH_get();
  public static readonly int XPLM_VK_PERIOD = XPlaneWrappersPINVOKE.XPLM_VK_PERIOD_get();
  public static readonly int XPLM_VK_BACKQUOTE = XPlaneWrappersPINVOKE.XPLM_VK_BACKQUOTE_get();
  public static readonly int XPLM_VK_ENTER = XPlaneWrappersPINVOKE.XPLM_VK_ENTER_get();
  public static readonly int XPLM_VK_NUMPAD_ENT = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD_ENT_get();
  public static readonly int XPLM_VK_NUMPAD_EQ = XPlaneWrappersPINVOKE.XPLM_VK_NUMPAD_EQ_get();
  public static readonly int xplm_CursorDefault = XPlaneWrappersPINVOKE.xplm_CursorDefault_get();
  public static readonly int xplm_CursorHidden = XPlaneWrappersPINVOKE.xplm_CursorHidden_get();
  public static readonly int xplm_CursorArrow = XPlaneWrappersPINVOKE.xplm_CursorArrow_get();
  public static readonly int xplm_CursorCustom = XPlaneWrappersPINVOKE.xplm_CursorCustom_get();

  public static readonly int xplm_MouseDown = XPlaneWrappersPINVOKE.xplm_MouseDown_get();
  public static readonly int xplm_MouseDrag = XPlaneWrappersPINVOKE.xplm_MouseDrag_get();
  public static readonly int xplm_MouseUp = XPlaneWrappersPINVOKE.xplm_MouseUp_get();

  public static readonly int XPLM_MSG_PLANE_CRASHED = XPlaneWrappersPINVOKE.XPLM_MSG_PLANE_CRASHED_get();
  public static readonly int XPLM_MSG_PLANE_LOADED = XPlaneWrappersPINVOKE.XPLM_MSG_PLANE_LOADED_get();
  public static readonly int XPLM_MSG_AIRPORT_LOADED = XPlaneWrappersPINVOKE.XPLM_MSG_AIRPORT_LOADED_get();
  public static readonly int XPLM_MSG_SCENERY_LOADED = XPlaneWrappersPINVOKE.XPLM_MSG_SCENERY_LOADED_get();
  public static readonly int XPLM_MSG_AIRPLANE_COUNT_CHANGED = XPlaneWrappersPINVOKE.XPLM_MSG_AIRPLANE_COUNT_CHANGED_get();
  public static readonly int XPLM_MSG_PLANE_UNLOADED = XPlaneWrappersPINVOKE.XPLM_MSG_PLANE_UNLOADED_get();
  public static readonly int XPLM_MSG_WILL_WRITE_PREFS = XPlaneWrappersPINVOKE.XPLM_MSG_WILL_WRITE_PREFS_get();
  public static readonly int XPLM_MSG_LIVERY_LOADED = XPlaneWrappersPINVOKE.XPLM_MSG_LIVERY_LOADED_get();
  public static readonly int XPLM_MSG_ENTERED_VR = XPlaneWrappersPINVOKE.XPLM_MSG_ENTERED_VR_get();
  public static readonly int XPLM_MSG_EXITING_VR = XPlaneWrappersPINVOKE.XPLM_MSG_EXITING_VR_get();
  public static readonly int XPLM_MSG_RELEASE_PLANES = XPlaneWrappersPINVOKE.XPLM_MSG_RELEASE_PLANES_get();
  public static readonly int XPLM_MSG_FMOD_BANK_LOADED = XPlaneWrappersPINVOKE.XPLM_MSG_FMOD_BANK_LOADED_get();
  public static readonly int XPLM_MSG_FMOD_BANK_UNLOADING = XPlaneWrappersPINVOKE.XPLM_MSG_FMOD_BANK_UNLOADING_get();
  public static readonly int XPLM_MSG_DATAREFS_ADDED = XPlaneWrappersPINVOKE.XPLM_MSG_DATAREFS_ADDED_get();
  public static readonly int XPLM_USER_AIRCRAFT = XPlaneWrappersPINVOKE.XPLM_USER_AIRCRAFT_get();
  public static readonly int xplm_AudioRadioCom1 = XPlaneWrappersPINVOKE.xplm_AudioRadioCom1_get();
  public static readonly int xplm_AudioRadioCom2 = XPlaneWrappersPINVOKE.xplm_AudioRadioCom2_get();
  public static readonly int xplm_AudioRadioPilot = XPlaneWrappersPINVOKE.xplm_AudioRadioPilot_get();
  public static readonly int xplm_AudioRadioCopilot = XPlaneWrappersPINVOKE.xplm_AudioRadioCopilot_get();
  public static readonly int xplm_AudioExteriorAircraft = XPlaneWrappersPINVOKE.xplm_AudioExteriorAircraft_get();
  public static readonly int xplm_AudioExteriorEnvironment = XPlaneWrappersPINVOKE.xplm_AudioExteriorEnvironment_get();
  public static readonly int xplm_AudioExteriorUnprocessed = XPlaneWrappersPINVOKE.xplm_AudioExteriorUnprocessed_get();
  public static readonly int xplm_AudioInterior = XPlaneWrappersPINVOKE.xplm_AudioInterior_get();
  public static readonly int xplm_AudioUI = XPlaneWrappersPINVOKE.xplm_AudioUI_get();
  public static readonly int xplm_AudioGround = XPlaneWrappersPINVOKE.xplm_AudioGround_get();
  public static readonly int xplm_Master = XPlaneWrappersPINVOKE.xplm_Master_get();

  public static readonly int xplm_MasterBank = XPlaneWrappersPINVOKE.xplm_MasterBank_get();
  public static readonly int xplm_RadioBank = XPlaneWrappersPINVOKE.xplm_RadioBank_get();

  public static readonly int xplmType_Unknown = XPlaneWrappersPINVOKE.xplmType_Unknown_get();
  public static readonly int xplmType_Int = XPlaneWrappersPINVOKE.xplmType_Int_get();
  public static readonly int xplmType_Float = XPlaneWrappersPINVOKE.xplmType_Float_get();
  public static readonly int xplmType_Double = XPlaneWrappersPINVOKE.xplmType_Double_get();
  public static readonly int xplmType_FloatArray = XPlaneWrappersPINVOKE.xplmType_FloatArray_get();
  public static readonly int xplmType_IntArray = XPlaneWrappersPINVOKE.xplmType_IntArray_get();
  public static readonly int xplmType_Data = XPlaneWrappersPINVOKE.xplmType_Data_get();

  public static readonly int xplm_Nav_Unknown = XPlaneWrappersPINVOKE.xplm_Nav_Unknown_get();
  public static readonly int xplm_Nav_Airport = XPlaneWrappersPINVOKE.xplm_Nav_Airport_get();
  public static readonly int xplm_Nav_NDB = XPlaneWrappersPINVOKE.xplm_Nav_NDB_get();
  public static readonly int xplm_Nav_VOR = XPlaneWrappersPINVOKE.xplm_Nav_VOR_get();
  public static readonly int xplm_Nav_ILS = XPlaneWrappersPINVOKE.xplm_Nav_ILS_get();
  public static readonly int xplm_Nav_Localizer = XPlaneWrappersPINVOKE.xplm_Nav_Localizer_get();
  public static readonly int xplm_Nav_GlideSlope = XPlaneWrappersPINVOKE.xplm_Nav_GlideSlope_get();
  public static readonly int xplm_Nav_OuterMarker = XPlaneWrappersPINVOKE.xplm_Nav_OuterMarker_get();
  public static readonly int xplm_Nav_MiddleMarker = XPlaneWrappersPINVOKE.xplm_Nav_MiddleMarker_get();
  public static readonly int xplm_Nav_InnerMarker = XPlaneWrappersPINVOKE.xplm_Nav_InnerMarker_get();
  public static readonly int xplm_Nav_Fix = XPlaneWrappersPINVOKE.xplm_Nav_Fix_get();
  public static readonly int xplm_Nav_DME = XPlaneWrappersPINVOKE.xplm_Nav_DME_get();
  public static readonly int xplm_Nav_LatLon = XPlaneWrappersPINVOKE.xplm_Nav_LatLon_get();
  public static readonly int xplm_Nav_TACAN = XPlaneWrappersPINVOKE.xplm_Nav_TACAN_get();

  public static readonly int XPLM_NAV_NOT_FOUND = XPlaneWrappersPINVOKE.XPLM_NAV_NOT_FOUND_get();
  public static readonly int xplm_Fpl_Pilot_Primary = XPlaneWrappersPINVOKE.xplm_Fpl_Pilot_Primary_get();
  public static readonly int xplm_Fpl_CoPilot_Primary = XPlaneWrappersPINVOKE.xplm_Fpl_CoPilot_Primary_get();
  public static readonly int xplm_Fpl_Pilot_Approach = XPlaneWrappersPINVOKE.xplm_Fpl_Pilot_Approach_get();
  public static readonly int xplm_Fpl_CoPilot_Approach = XPlaneWrappersPINVOKE.xplm_Fpl_CoPilot_Approach_get();
  public static readonly int xplm_Fpl_Pilot_Temporary = XPlaneWrappersPINVOKE.xplm_Fpl_Pilot_Temporary_get();
  public static readonly int xplm_Fpl_CoPilot_Temporary = XPlaneWrappersPINVOKE.xplm_Fpl_CoPilot_Temporary_get();

  public static readonly int xplm_Tex_GeneralInterface = XPlaneWrappersPINVOKE.xplm_Tex_GeneralInterface_get();

  public static readonly int xplmFont_Basic = XPlaneWrappersPINVOKE.xplmFont_Basic_get();
  public static readonly int xplmFont_Proportional = XPlaneWrappersPINVOKE.xplmFont_Proportional_get();

  public static readonly int xplm_Phase_Modern3D = XPlaneWrappersPINVOKE.xplm_Phase_Modern3D_get();
  public static readonly int xplm_Phase_FirstCockpit = XPlaneWrappersPINVOKE.xplm_Phase_FirstCockpit_get();
  public static readonly int xplm_Phase_Panel = XPlaneWrappersPINVOKE.xplm_Phase_Panel_get();
  public static readonly int xplm_Phase_Gauges = XPlaneWrappersPINVOKE.xplm_Phase_Gauges_get();
  public static readonly int xplm_Phase_Window = XPlaneWrappersPINVOKE.xplm_Phase_Window_get();
  public static readonly int xplm_Phase_LastCockpit = XPlaneWrappersPINVOKE.xplm_Phase_LastCockpit_get();
  public static readonly int xplm_Phase_LocalMap3D = XPlaneWrappersPINVOKE.xplm_Phase_LocalMap3D_get();
  public static readonly int xplm_Phase_LocalMap2D = XPlaneWrappersPINVOKE.xplm_Phase_LocalMap2D_get();
  public static readonly int xplm_Phase_LocalMapProfile = XPlaneWrappersPINVOKE.xplm_Phase_LocalMapProfile_get();

  public static readonly int xplm_device_GNS430_1 = XPlaneWrappersPINVOKE.xplm_device_GNS430_1_get();
  public static readonly int xplm_device_GNS430_2 = XPlaneWrappersPINVOKE.xplm_device_GNS430_2_get();
  public static readonly int xplm_device_GNS530_1 = XPlaneWrappersPINVOKE.xplm_device_GNS530_1_get();
  public static readonly int xplm_device_GNS530_2 = XPlaneWrappersPINVOKE.xplm_device_GNS530_2_get();
  public static readonly int xplm_device_CDU739_1 = XPlaneWrappersPINVOKE.xplm_device_CDU739_1_get();
  public static readonly int xplm_device_CDU739_2 = XPlaneWrappersPINVOKE.xplm_device_CDU739_2_get();
  public static readonly int xplm_device_G1000_PFD_1 = XPlaneWrappersPINVOKE.xplm_device_G1000_PFD_1_get();
  public static readonly int xplm_device_G1000_MFD = XPlaneWrappersPINVOKE.xplm_device_G1000_MFD_get();
  public static readonly int xplm_device_G1000_PFD_2 = XPlaneWrappersPINVOKE.xplm_device_G1000_PFD_2_get();
  public static readonly int xplm_device_CDU815_1 = XPlaneWrappersPINVOKE.xplm_device_CDU815_1_get();
  public static readonly int xplm_device_CDU815_2 = XPlaneWrappersPINVOKE.xplm_device_CDU815_2_get();
  public static readonly int xplm_device_Primus_PFD_1 = XPlaneWrappersPINVOKE.xplm_device_Primus_PFD_1_get();
  public static readonly int xplm_device_Primus_PFD_2 = XPlaneWrappersPINVOKE.xplm_device_Primus_PFD_2_get();
  public static readonly int xplm_device_Primus_MFD_1 = XPlaneWrappersPINVOKE.xplm_device_Primus_MFD_1_get();
  public static readonly int xplm_device_Primus_MFD_2 = XPlaneWrappersPINVOKE.xplm_device_Primus_MFD_2_get();
  public static readonly int xplm_device_Primus_MFD_3 = XPlaneWrappersPINVOKE.xplm_device_Primus_MFD_3_get();
  public static readonly int xplm_device_Primus_RMU_1 = XPlaneWrappersPINVOKE.xplm_device_Primus_RMU_1_get();
  public static readonly int xplm_device_Primus_RMU_2 = XPlaneWrappersPINVOKE.xplm_device_Primus_RMU_2_get();

  public static readonly int xplm_WindowLayerFlightOverlay = XPlaneWrappersPINVOKE.xplm_WindowLayerFlightOverlay_get();
  public static readonly int xplm_WindowLayerFloatingWindows = XPlaneWrappersPINVOKE.xplm_WindowLayerFloatingWindows_get();
  public static readonly int xplm_WindowLayerModal = XPlaneWrappersPINVOKE.xplm_WindowLayerModal_get();
  public static readonly int xplm_WindowLayerGrowlNotifications = XPlaneWrappersPINVOKE.xplm_WindowLayerGrowlNotifications_get();

  public static readonly int xplm_WindowDecorationNone = XPlaneWrappersPINVOKE.xplm_WindowDecorationNone_get();
  public static readonly int xplm_WindowDecorationRoundRectangle = XPlaneWrappersPINVOKE.xplm_WindowDecorationRoundRectangle_get();
  public static readonly int xplm_WindowDecorationSelfDecorated = XPlaneWrappersPINVOKE.xplm_WindowDecorationSelfDecorated_get();
  public static readonly int xplm_WindowDecorationSelfDecoratedResizable = XPlaneWrappersPINVOKE.xplm_WindowDecorationSelfDecoratedResizable_get();

  public static readonly int xplm_WindowPositionFree = XPlaneWrappersPINVOKE.xplm_WindowPositionFree_get();
  public static readonly int xplm_WindowCenterOnMonitor = XPlaneWrappersPINVOKE.xplm_WindowCenterOnMonitor_get();
  public static readonly int xplm_WindowFullScreenOnMonitor = XPlaneWrappersPINVOKE.xplm_WindowFullScreenOnMonitor_get();
  public static readonly int xplm_WindowFullScreenOnAllMonitors = XPlaneWrappersPINVOKE.xplm_WindowFullScreenOnAllMonitors_get();
  public static readonly int xplm_WindowPopOut = XPlaneWrappersPINVOKE.xplm_WindowPopOut_get();
  public static readonly int xplm_WindowVR = XPlaneWrappersPINVOKE.xplm_WindowVR_get();

  public static readonly int xplm_FlightLoop_Phase_BeforeFlightModel = XPlaneWrappersPINVOKE.xplm_FlightLoop_Phase_BeforeFlightModel_get();
  public static readonly int xplm_FlightLoop_Phase_AfterFlightModel = XPlaneWrappersPINVOKE.xplm_FlightLoop_Phase_AfterFlightModel_get();

  public static readonly int xplm_DataFile_Situation = XPlaneWrappersPINVOKE.xplm_DataFile_Situation_get();
  public static readonly int xplm_DataFile_ReplayMovie = XPlaneWrappersPINVOKE.xplm_DataFile_ReplayMovie_get();

  public static readonly int xplm_Host_Unknown = XPlaneWrappersPINVOKE.xplm_Host_Unknown_get();
  public static readonly int xplm_Host_XPlane = XPlaneWrappersPINVOKE.xplm_Host_XPlane_get();

  public static readonly int xplm_Language_Unknown = XPlaneWrappersPINVOKE.xplm_Language_Unknown_get();
  public static readonly int xplm_Language_English = XPlaneWrappersPINVOKE.xplm_Language_English_get();
  public static readonly int xplm_Language_French = XPlaneWrappersPINVOKE.xplm_Language_French_get();
  public static readonly int xplm_Language_German = XPlaneWrappersPINVOKE.xplm_Language_German_get();
  public static readonly int xplm_Language_Italian = XPlaneWrappersPINVOKE.xplm_Language_Italian_get();
  public static readonly int xplm_Language_Spanish = XPlaneWrappersPINVOKE.xplm_Language_Spanish_get();
  public static readonly int xplm_Language_Korean = XPlaneWrappersPINVOKE.xplm_Language_Korean_get();
  public static readonly int xplm_Language_Russian = XPlaneWrappersPINVOKE.xplm_Language_Russian_get();
  public static readonly int xplm_Language_Greek = XPlaneWrappersPINVOKE.xplm_Language_Greek_get();
  public static readonly int xplm_Language_Japanese = XPlaneWrappersPINVOKE.xplm_Language_Japanese_get();
  public static readonly int xplm_Language_Chinese = XPlaneWrappersPINVOKE.xplm_Language_Chinese_get();
  public static readonly int xplm_Language_Ukrainian = XPlaneWrappersPINVOKE.xplm_Language_Ukrainian_get();

  public static readonly int xplm_CommandBegin = XPlaneWrappersPINVOKE.xplm_CommandBegin_get();
  public static readonly int xplm_CommandContinue = XPlaneWrappersPINVOKE.xplm_CommandContinue_get();
  public static readonly int xplm_CommandEnd = XPlaneWrappersPINVOKE.xplm_CommandEnd_get();

  public static readonly int xplm_Menu_NoCheck = XPlaneWrappersPINVOKE.xplm_Menu_NoCheck_get();
  public static readonly int xplm_Menu_Unchecked = XPlaneWrappersPINVOKE.xplm_Menu_Unchecked_get();
  public static readonly int xplm_Menu_Checked = XPlaneWrappersPINVOKE.xplm_Menu_Checked_get();

  public static readonly int xplm_ControlCameraUntilViewChanges = XPlaneWrappersPINVOKE.xplm_ControlCameraUntilViewChanges_get();
  public static readonly int xplm_ControlCameraForever = XPlaneWrappersPINVOKE.xplm_ControlCameraForever_get();

  public static readonly int xplm_MapStyle_VFR_Sectional = XPlaneWrappersPINVOKE.xplm_MapStyle_VFR_Sectional_get();
  public static readonly int xplm_MapStyle_IFR_LowEnroute = XPlaneWrappersPINVOKE.xplm_MapStyle_IFR_LowEnroute_get();
  public static readonly int xplm_MapStyle_IFR_HighEnroute = XPlaneWrappersPINVOKE.xplm_MapStyle_IFR_HighEnroute_get();

  public static readonly int xplm_MapLayer_Fill = XPlaneWrappersPINVOKE.xplm_MapLayer_Fill_get();
  public static readonly int xplm_MapLayer_Markings = XPlaneWrappersPINVOKE.xplm_MapLayer_Markings_get();

  public static readonly string XPLM_MAP_USER_INTERFACE = XPlaneWrappersPINVOKE.XPLM_MAP_USER_INTERFACE_get();
  public static readonly string XPLM_MAP_IOS = XPlaneWrappersPINVOKE.XPLM_MAP_IOS_get();
  public static readonly int xplm_MapOrientation_Map = XPlaneWrappersPINVOKE.xplm_MapOrientation_Map_get();
  public static readonly int xplm_MapOrientation_UI = XPlaneWrappersPINVOKE.xplm_MapOrientation_UI_get();

  public static readonly int xplm_ProbeY = XPlaneWrappersPINVOKE.xplm_ProbeY_get();

  public static readonly int xplm_ProbeHitTerrain = XPlaneWrappersPINVOKE.xplm_ProbeHitTerrain_get();
  public static readonly int xplm_ProbeError = XPlaneWrappersPINVOKE.xplm_ProbeError_get();
  public static readonly int xplm_ProbeMissed = XPlaneWrappersPINVOKE.xplm_ProbeMissed_get();

  public static readonly int xpProperty_Refcon = XPlaneWrappersPINVOKE.xpProperty_Refcon_get();
  public static readonly int xpProperty_Dragging = XPlaneWrappersPINVOKE.xpProperty_Dragging_get();
  public static readonly int xpProperty_DragXOff = XPlaneWrappersPINVOKE.xpProperty_DragXOff_get();
  public static readonly int xpProperty_DragYOff = XPlaneWrappersPINVOKE.xpProperty_DragYOff_get();
  public static readonly int xpProperty_Hilited = XPlaneWrappersPINVOKE.xpProperty_Hilited_get();
  public static readonly int xpProperty_Object = XPlaneWrappersPINVOKE.xpProperty_Object_get();
  public static readonly int xpProperty_Clip = XPlaneWrappersPINVOKE.xpProperty_Clip_get();
  public static readonly int xpProperty_Enabled = XPlaneWrappersPINVOKE.xpProperty_Enabled_get();
  public static readonly int xpProperty_UserStart = XPlaneWrappersPINVOKE.xpProperty_UserStart_get();

  public static readonly int xpMode_Direct = XPlaneWrappersPINVOKE.xpMode_Direct_get();
  public static readonly int xpMode_UpChain = XPlaneWrappersPINVOKE.xpMode_UpChain_get();
  public static readonly int xpMode_Recursive = XPlaneWrappersPINVOKE.xpMode_Recursive_get();
  public static readonly int xpMode_DirectAllCallbacks = XPlaneWrappersPINVOKE.xpMode_DirectAllCallbacks_get();
  public static readonly int xpMode_Once = XPlaneWrappersPINVOKE.xpMode_Once_get();

  public static readonly int xpWidgetClass_None = XPlaneWrappersPINVOKE.xpWidgetClass_None_get();
  public static readonly int xpMsg_None = XPlaneWrappersPINVOKE.xpMsg_None_get();
  public static readonly int xpMsg_Create = XPlaneWrappersPINVOKE.xpMsg_Create_get();
  public static readonly int xpMsg_Destroy = XPlaneWrappersPINVOKE.xpMsg_Destroy_get();
  public static readonly int xpMsg_Paint = XPlaneWrappersPINVOKE.xpMsg_Paint_get();
  public static readonly int xpMsg_Draw = XPlaneWrappersPINVOKE.xpMsg_Draw_get();
  public static readonly int xpMsg_KeyPress = XPlaneWrappersPINVOKE.xpMsg_KeyPress_get();
  public static readonly int xpMsg_KeyTakeFocus = XPlaneWrappersPINVOKE.xpMsg_KeyTakeFocus_get();
  public static readonly int xpMsg_KeyLoseFocus = XPlaneWrappersPINVOKE.xpMsg_KeyLoseFocus_get();
  public static readonly int xpMsg_MouseDown = XPlaneWrappersPINVOKE.xpMsg_MouseDown_get();
  public static readonly int xpMsg_MouseDrag = XPlaneWrappersPINVOKE.xpMsg_MouseDrag_get();
  public static readonly int xpMsg_MouseUp = XPlaneWrappersPINVOKE.xpMsg_MouseUp_get();
  public static readonly int xpMsg_Reshape = XPlaneWrappersPINVOKE.xpMsg_Reshape_get();
  public static readonly int xpMsg_ExposedChanged = XPlaneWrappersPINVOKE.xpMsg_ExposedChanged_get();
  public static readonly int xpMsg_AcceptChild = XPlaneWrappersPINVOKE.xpMsg_AcceptChild_get();
  public static readonly int xpMsg_LoseChild = XPlaneWrappersPINVOKE.xpMsg_LoseChild_get();
  public static readonly int xpMsg_AcceptParent = XPlaneWrappersPINVOKE.xpMsg_AcceptParent_get();
  public static readonly int xpMsg_Shown = XPlaneWrappersPINVOKE.xpMsg_Shown_get();
  public static readonly int xpMsg_Hidden = XPlaneWrappersPINVOKE.xpMsg_Hidden_get();
  public static readonly int xpMsg_DescriptorChanged = XPlaneWrappersPINVOKE.xpMsg_DescriptorChanged_get();
  public static readonly int xpMsg_PropertyChanged = XPlaneWrappersPINVOKE.xpMsg_PropertyChanged_get();
  public static readonly int xpMsg_MouseWheel = XPlaneWrappersPINVOKE.xpMsg_MouseWheel_get();
  public static readonly int xpMsg_CursorAdjust = XPlaneWrappersPINVOKE.xpMsg_CursorAdjust_get();
  public static readonly int xpMsg_UserStart = XPlaneWrappersPINVOKE.xpMsg_UserStart_get();

  public static readonly int xpWidgetClass_MainWindow = XPlaneWrappersPINVOKE.xpWidgetClass_MainWindow_get();
  public static readonly int xpMainWindowStyle_MainWindow = XPlaneWrappersPINVOKE.xpMainWindowStyle_MainWindow_get();
  public static readonly int xpMainWindowStyle_Translucent = XPlaneWrappersPINVOKE.xpMainWindowStyle_Translucent_get();

  public static readonly int xpProperty_MainWindowType = XPlaneWrappersPINVOKE.xpProperty_MainWindowType_get();
  public static readonly int xpProperty_MainWindowHasCloseBoxes = XPlaneWrappersPINVOKE.xpProperty_MainWindowHasCloseBoxes_get();

  public static readonly int xpMessage_CloseButtonPushed = XPlaneWrappersPINVOKE.xpMessage_CloseButtonPushed_get();

  public static readonly int xpWidgetClass_SubWindow = XPlaneWrappersPINVOKE.xpWidgetClass_SubWindow_get();
  public static readonly int xpSubWindowStyle_SubWindow = XPlaneWrappersPINVOKE.xpSubWindowStyle_SubWindow_get();
  public static readonly int xpSubWindowStyle_Screen = XPlaneWrappersPINVOKE.xpSubWindowStyle_Screen_get();
  public static readonly int xpSubWindowStyle_ListView = XPlaneWrappersPINVOKE.xpSubWindowStyle_ListView_get();

  public static readonly int xpProperty_SubWindowType = XPlaneWrappersPINVOKE.xpProperty_SubWindowType_get();

  public static readonly int xpWidgetClass_Button = XPlaneWrappersPINVOKE.xpWidgetClass_Button_get();
  public static readonly int xpPushButton = XPlaneWrappersPINVOKE.xpPushButton_get();
  public static readonly int xpRadioButton = XPlaneWrappersPINVOKE.xpRadioButton_get();
  public static readonly int xpWindowCloseBox = XPlaneWrappersPINVOKE.xpWindowCloseBox_get();
  public static readonly int xpLittleDownArrow = XPlaneWrappersPINVOKE.xpLittleDownArrow_get();
  public static readonly int xpLittleUpArrow = XPlaneWrappersPINVOKE.xpLittleUpArrow_get();

  public static readonly int xpButtonBehaviorPushButton = XPlaneWrappersPINVOKE.xpButtonBehaviorPushButton_get();
  public static readonly int xpButtonBehaviorCheckBox = XPlaneWrappersPINVOKE.xpButtonBehaviorCheckBox_get();
  public static readonly int xpButtonBehaviorRadioButton = XPlaneWrappersPINVOKE.xpButtonBehaviorRadioButton_get();

  public static readonly int xpProperty_ButtonType = XPlaneWrappersPINVOKE.xpProperty_ButtonType_get();
  public static readonly int xpProperty_ButtonBehavior = XPlaneWrappersPINVOKE.xpProperty_ButtonBehavior_get();
  public static readonly int xpProperty_ButtonState = XPlaneWrappersPINVOKE.xpProperty_ButtonState_get();

  public static readonly int xpMsg_PushButtonPressed = XPlaneWrappersPINVOKE.xpMsg_PushButtonPressed_get();
  public static readonly int xpMsg_ButtonStateChanged = XPlaneWrappersPINVOKE.xpMsg_ButtonStateChanged_get();

  public static readonly int xpWidgetClass_TextField = XPlaneWrappersPINVOKE.xpWidgetClass_TextField_get();
  public static readonly int xpTextEntryField = XPlaneWrappersPINVOKE.xpTextEntryField_get();
  public static readonly int xpTextTransparent = XPlaneWrappersPINVOKE.xpTextTransparent_get();
  public static readonly int xpTextTranslucent = XPlaneWrappersPINVOKE.xpTextTranslucent_get();

  public static readonly int xpProperty_EditFieldSelStart = XPlaneWrappersPINVOKE.xpProperty_EditFieldSelStart_get();
  public static readonly int xpProperty_EditFieldSelEnd = XPlaneWrappersPINVOKE.xpProperty_EditFieldSelEnd_get();
  public static readonly int xpProperty_EditFieldSelDragStart = XPlaneWrappersPINVOKE.xpProperty_EditFieldSelDragStart_get();
  public static readonly int xpProperty_TextFieldType = XPlaneWrappersPINVOKE.xpProperty_TextFieldType_get();
  public static readonly int xpProperty_PasswordMode = XPlaneWrappersPINVOKE.xpProperty_PasswordMode_get();
  public static readonly int xpProperty_MaxCharacters = XPlaneWrappersPINVOKE.xpProperty_MaxCharacters_get();
  public static readonly int xpProperty_ScrollPosition = XPlaneWrappersPINVOKE.xpProperty_ScrollPosition_get();
  public static readonly int xpProperty_Font = XPlaneWrappersPINVOKE.xpProperty_Font_get();
  public static readonly int xpProperty_ActiveEditSide = XPlaneWrappersPINVOKE.xpProperty_ActiveEditSide_get();

  public static readonly int xpMsg_TextFieldChanged = XPlaneWrappersPINVOKE.xpMsg_TextFieldChanged_get();

  public static readonly int xpWidgetClass_ScrollBar = XPlaneWrappersPINVOKE.xpWidgetClass_ScrollBar_get();
  public static readonly int xpScrollBarTypeScrollBar = XPlaneWrappersPINVOKE.xpScrollBarTypeScrollBar_get();
  public static readonly int xpScrollBarTypeSlider = XPlaneWrappersPINVOKE.xpScrollBarTypeSlider_get();

  public static readonly int xpProperty_ScrollBarSliderPosition = XPlaneWrappersPINVOKE.xpProperty_ScrollBarSliderPosition_get();
  public static readonly int xpProperty_ScrollBarMin = XPlaneWrappersPINVOKE.xpProperty_ScrollBarMin_get();
  public static readonly int xpProperty_ScrollBarMax = XPlaneWrappersPINVOKE.xpProperty_ScrollBarMax_get();
  public static readonly int xpProperty_ScrollBarPageAmount = XPlaneWrappersPINVOKE.xpProperty_ScrollBarPageAmount_get();
  public static readonly int xpProperty_ScrollBarType = XPlaneWrappersPINVOKE.xpProperty_ScrollBarType_get();
  public static readonly int xpProperty_ScrollBarSlop = XPlaneWrappersPINVOKE.xpProperty_ScrollBarSlop_get();

  public static readonly int xpMsg_ScrollBarSliderPositionChanged = XPlaneWrappersPINVOKE.xpMsg_ScrollBarSliderPositionChanged_get();

  public static readonly int xpWidgetClass_Caption = XPlaneWrappersPINVOKE.xpWidgetClass_Caption_get();
  public static readonly int xpProperty_CaptionLit = XPlaneWrappersPINVOKE.xpProperty_CaptionLit_get();

  public static readonly int xpWidgetClass_GeneralGraphics = XPlaneWrappersPINVOKE.xpWidgetClass_GeneralGraphics_get();
  public static readonly int xpShip = XPlaneWrappersPINVOKE.xpShip_get();
  public static readonly int xpILSGlideScope = XPlaneWrappersPINVOKE.xpILSGlideScope_get();
  public static readonly int xpMarkerLeft = XPlaneWrappersPINVOKE.xpMarkerLeft_get();
  public static readonly int xp_Airport = XPlaneWrappersPINVOKE.xp_Airport_get();
  public static readonly int xpNDB = XPlaneWrappersPINVOKE.xpNDB_get();
  public static readonly int xpVOR = XPlaneWrappersPINVOKE.xpVOR_get();
  public static readonly int xpRadioTower = XPlaneWrappersPINVOKE.xpRadioTower_get();
  public static readonly int xpAircraftCarrier = XPlaneWrappersPINVOKE.xpAircraftCarrier_get();
  public static readonly int xpFire = XPlaneWrappersPINVOKE.xpFire_get();
  public static readonly int xpMarkerRight = XPlaneWrappersPINVOKE.xpMarkerRight_get();
  public static readonly int xpCustomObject = XPlaneWrappersPINVOKE.xpCustomObject_get();
  public static readonly int xpCoolingTower = XPlaneWrappersPINVOKE.xpCoolingTower_get();
  public static readonly int xpSmokeStack = XPlaneWrappersPINVOKE.xpSmokeStack_get();
  public static readonly int xpBuilding = XPlaneWrappersPINVOKE.xpBuilding_get();
  public static readonly int xpPowerLine = XPlaneWrappersPINVOKE.xpPowerLine_get();
  public static readonly int xpVORWithCompassRose = XPlaneWrappersPINVOKE.xpVORWithCompassRose_get();
  public static readonly int xpOilPlatform = XPlaneWrappersPINVOKE.xpOilPlatform_get();
  public static readonly int xpOilPlatformSmall = XPlaneWrappersPINVOKE.xpOilPlatformSmall_get();
  public static readonly int xpWayPoint = XPlaneWrappersPINVOKE.xpWayPoint_get();

  public static readonly int xpProperty_GeneralGraphicsType = XPlaneWrappersPINVOKE.xpProperty_GeneralGraphicsType_get();

  public static readonly int xpWidgetClass_Progress = XPlaneWrappersPINVOKE.xpWidgetClass_Progress_get();
  public static readonly int xpProperty_ProgressPosition = XPlaneWrappersPINVOKE.xpProperty_ProgressPosition_get();
  public static readonly int xpProperty_ProgressMin = XPlaneWrappersPINVOKE.xpProperty_ProgressMin_get();
  public static readonly int xpProperty_ProgressMax = XPlaneWrappersPINVOKE.xpProperty_ProgressMax_get();

  public static readonly int NO_PARENT = XPlaneWrappersPINVOKE.NO_PARENT_get();
  public static readonly int PARAM_PARENT = XPlaneWrappersPINVOKE.PARAM_PARENT_get();
  public static readonly int xpWindow_Help = XPlaneWrappersPINVOKE.xpWindow_Help_get();
  public static readonly int xpWindow_MainWindow = XPlaneWrappersPINVOKE.xpWindow_MainWindow_get();
  public static readonly int xpWindow_SubWindow = XPlaneWrappersPINVOKE.xpWindow_SubWindow_get();
  public static readonly int xpWindow_Screen = XPlaneWrappersPINVOKE.xpWindow_Screen_get();
  public static readonly int xpWindow_ListView = XPlaneWrappersPINVOKE.xpWindow_ListView_get();

  public static readonly int xpElement_TextField = XPlaneWrappersPINVOKE.xpElement_TextField_get();
  public static readonly int xpElement_CheckBox = XPlaneWrappersPINVOKE.xpElement_CheckBox_get();
  public static readonly int xpElement_CheckBoxLit = XPlaneWrappersPINVOKE.xpElement_CheckBoxLit_get();
  public static readonly int xpElement_WindowCloseBox = XPlaneWrappersPINVOKE.xpElement_WindowCloseBox_get();
  public static readonly int xpElement_WindowCloseBoxPressed = XPlaneWrappersPINVOKE.xpElement_WindowCloseBoxPressed_get();
  public static readonly int xpElement_PushButton = XPlaneWrappersPINVOKE.xpElement_PushButton_get();
  public static readonly int xpElement_PushButtonLit = XPlaneWrappersPINVOKE.xpElement_PushButtonLit_get();
  public static readonly int xpElement_OilPlatform = XPlaneWrappersPINVOKE.xpElement_OilPlatform_get();
  public static readonly int xpElement_OilPlatformSmall = XPlaneWrappersPINVOKE.xpElement_OilPlatformSmall_get();
  public static readonly int xpElement_Ship = XPlaneWrappersPINVOKE.xpElement_Ship_get();
  public static readonly int xpElement_ILSGlideScope = XPlaneWrappersPINVOKE.xpElement_ILSGlideScope_get();
  public static readonly int xpElement_MarkerLeft = XPlaneWrappersPINVOKE.xpElement_MarkerLeft_get();
  public static readonly int xpElement_Airport = XPlaneWrappersPINVOKE.xpElement_Airport_get();
  public static readonly int xpElement_Waypoint = XPlaneWrappersPINVOKE.xpElement_Waypoint_get();
  public static readonly int xpElement_NDB = XPlaneWrappersPINVOKE.xpElement_NDB_get();
  public static readonly int xpElement_VOR = XPlaneWrappersPINVOKE.xpElement_VOR_get();
  public static readonly int xpElement_RadioTower = XPlaneWrappersPINVOKE.xpElement_RadioTower_get();
  public static readonly int xpElement_AircraftCarrier = XPlaneWrappersPINVOKE.xpElement_AircraftCarrier_get();
  public static readonly int xpElement_Fire = XPlaneWrappersPINVOKE.xpElement_Fire_get();
  public static readonly int xpElement_MarkerRight = XPlaneWrappersPINVOKE.xpElement_MarkerRight_get();
  public static readonly int xpElement_CustomObject = XPlaneWrappersPINVOKE.xpElement_CustomObject_get();
  public static readonly int xpElement_CoolingTower = XPlaneWrappersPINVOKE.xpElement_CoolingTower_get();
  public static readonly int xpElement_SmokeStack = XPlaneWrappersPINVOKE.xpElement_SmokeStack_get();
  public static readonly int xpElement_Building = XPlaneWrappersPINVOKE.xpElement_Building_get();
  public static readonly int xpElement_PowerLine = XPlaneWrappersPINVOKE.xpElement_PowerLine_get();
  public static readonly int xpElement_CopyButtons = XPlaneWrappersPINVOKE.xpElement_CopyButtons_get();
  public static readonly int xpElement_CopyButtonsWithEditingGrid = XPlaneWrappersPINVOKE.xpElement_CopyButtonsWithEditingGrid_get();
  public static readonly int xpElement_EditingGrid = XPlaneWrappersPINVOKE.xpElement_EditingGrid_get();
  public static readonly int xpElement_ScrollBar = XPlaneWrappersPINVOKE.xpElement_ScrollBar_get();
  public static readonly int xpElement_VORWithCompassRose = XPlaneWrappersPINVOKE.xpElement_VORWithCompassRose_get();
  public static readonly int xpElement_Zoomer = XPlaneWrappersPINVOKE.xpElement_Zoomer_get();
  public static readonly int xpElement_TextFieldMiddle = XPlaneWrappersPINVOKE.xpElement_TextFieldMiddle_get();
  public static readonly int xpElement_LittleDownArrow = XPlaneWrappersPINVOKE.xpElement_LittleDownArrow_get();
  public static readonly int xpElement_LittleUpArrow = XPlaneWrappersPINVOKE.xpElement_LittleUpArrow_get();
  public static readonly int xpElement_WindowDragBar = XPlaneWrappersPINVOKE.xpElement_WindowDragBar_get();
  public static readonly int xpElement_WindowDragBarSmooth = XPlaneWrappersPINVOKE.xpElement_WindowDragBarSmooth_get();

  public static readonly int xpTrack_ScrollBar = XPlaneWrappersPINVOKE.xpTrack_ScrollBar_get();
  public static readonly int xpTrack_Slider = XPlaneWrappersPINVOKE.xpTrack_Slider_get();
  public static readonly int xpTrack_Progress = XPlaneWrappersPINVOKE.xpTrack_Progress_get();

}

}
