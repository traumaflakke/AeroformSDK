import clang.cindex
import sys
import os
import hashlib


def generate_unique_name(prefix, content):
    hash_object = hashlib.md5(content.encode())
    return f"{prefix}_{hash_object.hexdigest()[:8]}"


def extract_enum_content(node):
    constants = []
    for child in node.get_children():
        if child.kind == clang.cindex.CursorKind.ENUM_CONSTANT_DECL:
            constants.append(f"{child.spelling} = {child.enum_value}")
    return ", ".join(constants)


def extract_struct_content(node):
    fields = []
    for child in node.get_children():
        if child.kind == clang.cindex.CursorKind.FIELD_DECL:
            fields.append(f"{child.type.spelling} {child.spelling}")
    return "; ".join(fields)


def find_types(node, types):
    if node.kind == clang.cindex.CursorKind.ENUM_DECL:
        content = extract_enum_content(node)
        name = node.spelling or generate_unique_name("AnonymousEnum", content)
        types[name] = f"enum {name} {{ {content} }}"
    elif node.kind == clang.cindex.CursorKind.STRUCT_DECL:
        content = extract_struct_content(node)
        name = node.spelling or generate_unique_name("AnonymousStruct", content)
        types[name] = f"struct {name} {{ {content} }}"
    elif node.kind == clang.cindex.CursorKind.TYPEDEF_DECL:
        underlying_type = node.underlying_typedef_type
        if underlying_type.kind == clang.cindex.TypeKind.ENUM:
            enum_decl = underlying_type.get_declaration()
            content = extract_enum_content(enum_decl)
            types[node.spelling] = f"enum {node.spelling} {{ {content} }}"
        elif underlying_type.kind == clang.cindex.TypeKind.RECORD:
            struct_decl = underlying_type.get_declaration()
            content = extract_struct_content(struct_decl)
            types[node.spelling] = f"struct {node.spelling} {{ {content} }}"

    for child in node.get_children():
        find_types(child, types)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python parse_c.py /path/to/XPlane/SDK/CHeaders")
        sys.exit(1)

    headers_path = sys.argv[1]
    index = clang.cindex.Index.create()
    types = {}

    for root, dirs, files in os.walk(headers_path):
        for file in files:
            if file.endswith(".h"):
                full_path = os.path.join(root, file)
                translation_unit = index.parse(
                    full_path, args=["-x", "c++", f"-I{headers_path}"]
                )
                find_types(translation_unit.cursor, types)

    with open("xplane_types.h", "w") as f:
        f.write("// Generated by parse_xplane_headers.py\n")
        f.write("#ifndef XPLANE_TYPES_H\n#define XPLANE_TYPES_H\n\n")
        for name, definition in types.items():
            f.write(f"typedef {definition};\n\n")
        f.write("#endif // XPLANE_TYPES_H\n")
